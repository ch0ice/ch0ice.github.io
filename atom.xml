<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Choice&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.onlinetool.com.cn/"/>
  <updated>2020-09-25T03:37:14.684Z</updated>
  <id>http://blog.onlinetool.com.cn/</id>
  
  <author>
    <name>Choice</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机基础(1) --- 计算机硬件</title>
    <link href="http://blog.onlinetool.com.cn/basic/basic-1-hardware/"/>
    <id>http://blog.onlinetool.com.cn/basic/basic-1-hardware/</id>
    <published>2020-06-12T05:29:40.000Z</published>
    <updated>2020-09-25T03:37:14.684Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="计算机基础" scheme="http://blog.onlinetool.com.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="http://blog.onlinetool.com.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="计算机硬件" scheme="http://blog.onlinetool.com.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础(3) --- 网络协议</title>
    <link href="http://blog.onlinetool.com.cn/basic/basic-3-network/"/>
    <id>http://blog.onlinetool.com.cn/basic/basic-3-network/</id>
    <published>2020-06-12T05:29:40.000Z</published>
    <updated>2020-09-25T03:37:14.684Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们每天都在使用互联网，通过互联网聊天、购物、听音乐、看电影，全世界有几十亿台电脑通过互联网两两交互，那什么是互联网呢？<br>互联网的核心是一系列协议，总称为<strong>互联网协议（Internet Protocol Suite）</strong>，它们对电脑如何连接和组网，做出了详尽的规定，理解了这些协议，就理解了互联网的交互原理。<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-interaction.png" alt="" title="互联网交互图"></p><h1 id="网络模型划分"><a href="#网络模型划分" class="headerlink" title="网络模型划分"></a>网络模型划分</h1><p>计算机网络的各层及其协议的集合被称为网络的体系结构，按照不同的维度，其常被分为七层、五层、四层网络结构，如下图所示：<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-model.png" alt="" title="网络层次划分"></p><h1 id="七层网络模型-—-OSI（Open-System-Interconnection）"><a href="#七层网络模型-—-OSI（Open-System-Interconnection）" class="headerlink" title="七层网络模型 — OSI（Open System Interconnection）"></a>七层网络模型 — OSI（Open System Interconnection）</h1><p>OSI — 开放式系统互联模型是一种概念模型，由国际标准化组织提出，并试图成为计算机在世界范围内互连为网络的标准框架，它具有七层网络结构。</p><h1 id="四层网络模型-—-TCP-IP"><a href="#四层网络模型-—-TCP-IP" class="headerlink" title="四层网络模型 — TCP/IP"></a>四层网络模型 — TCP/IP</h1><p>互联网协议套件（Internet Protocol Suite，IPS）是多个网络传输协议的集合，它为网际网络的基础通信提供架构支撑，由于该协议族中最核心的两个协议分别为 TCP（传输控制协议）和 IP（网际协议），因此它也被称为 TCP/IP 协议族，简称TCP/IP，它具有四层网络结构。</p><h1 id="五层网络模型-—-TCP-IP"><a href="#五层网络模型-—-TCP-IP" class="headerlink" title="五层网络模型 — TCP/IP"></a>五层网络模型 — TCP/IP</h1><p>OSI模型由国际标准化组织进行制定，它是正统意义上的国际标准，但其实现过于复杂、制定周期过长，在其整套标准推出之前，TCP/IP模型已经在全球范围内被广泛使用，所以 TCP/IP 模型才是事实上的国际标准。<br>TCP/IP 模型定义了应用层、传输层、网际层、网络接口层这四层网络结构，但并没有给出网络接口层的具体内容，因此在学习和开发中，通常将网络接口层替换为OSI七层模型中的数据链路层和物理层来进行理解，由此产生TCP/IP五层网络模型。<br>下面我们会对五层网络模型从下至上展开详细讲解。</p><h2 id="物理层（Physical-Layer）"><a href="#物理层（Physical-Layer）" class="headerlink" title="物理层（Physical Layer）"></a>物理层（Physical Layer）</h2><p>电脑之间组网第一件事是通过网卡、网线、集线器、中继器、调制解调器、光缆、电缆、双绞线、无线电波等物理设备将电脑之间连接起来。<br>这就是物理层，是把电脑之间连接起来的物理手段，该层为上层协议提供了一个传输数据的可靠的物理媒体，它规定了网络的一些电气特性，比如高电压1、低电压0，组成比特流进行传输。</p><h2 id="数据链路层（Data-Link-Layer）"><a href="#数据链路层（Data-Link-Layer）" class="headerlink" title="数据链路层（Data Link Layer）"></a>数据链路层（Data Link Layer）</h2><p>数据链路层在物理层提供的服务的基础上向网络层提供服务，物理层单纯的电信号0和1没有任何意义，必需规定解读方式，如电信号多少位一组、每组什么意思，它规定了电信号的分组方式，以及物理寻址（MAC），将源自网络层来的数据可靠地传输到相邻节点的目标主机的网络层（广播）。</p><h3 id="以太网协议（Ethernet-Protocol）"><a href="#以太网协议（Ethernet-Protocol）" class="headerlink" title="以太网协议（Ethernet Protocol）"></a>以太网协议（Ethernet Protocol）</h3><p>早期的时候各个公司都有自己的分组方式、后来形成了统一的分组成帧标准，即以太网协议。<br>以太网规定，一组电信号构成一个数据包，叫做”帧”（Frame），每一帧分成两个部分：报头（Head）和数据（Data）。<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-ethernet.png" alt="" title="以太网协议结构"><br>Head部分为定长18字节，Data部分为46 ~ 1500字节，因此单帧最小长度为64字节（head 18 + data 46）， 单帧最大长度为1518字节（head 18 + data 1500），如果超出最大长度就分割成多个帧进行发送。</p><h3 id="MAC地址（Media-Access-Control-Address）"><a href="#MAC地址（Media-Access-Control-Address）" class="headerlink" title="MAC地址（Media Access Control Address）"></a>MAC地址（Media Access Control Address）</h3><p>上面提到以太网数据包（Frame）的报头（Head）中包含源地址和目标地址信息就是网卡地址，即MAC地址。<br>每块网卡出厂时都有一个全世界独一无二的MAC地址，长度为6字节48位，通常用12个十六进制数表示，前6个十六进制数是厂商编号，后6个是该厂商的网卡流水号。<br>有了MAC地址，就可以定位网卡和数据包的路径了。</p><h3 id="广播（Broadcasting）"><a href="#广播（Broadcasting）" class="headerlink" title="广播（Broadcasting）"></a>广播（Broadcasting）</h3><p>我们现在知道了以太网数据包（Frame）的报头（Head）中包含的地址信息是MAC地址，我们知道本机网卡的MAC地址，但是我们还需要获取对端主机网卡的MAC地址，怎么获取呢？<br>答案是通过一种叫ARP的协议（下面会讲），我们可以得到对端主机网卡的MAC地址，但是怎么才能把数据包准确送到接收方呢？<br>答案是以太网采用了一种很”原始”的方式，它不是把数据包准确送到接收方，而是向本网络内所有主机发送，让每台计算机自己判断自己是否为接收方，它们读取这个包的”标头”找到接收方的MAC地址，然后与自身的MAC地址相比较，如果两者相同，就接受这个包做进一步处理，否则就丢弃这个包，这种发送方式就叫做”广播”（broadcasting）。</p><h2 id="网络层（Network-Layer）"><a href="#网络层（Network-Layer）" class="headerlink" title="网络层（Network Layer）"></a>网络层（Network Layer）</h2><p>有了以太网数据包的定义、网卡的MAC地址、广播的发送方式，世界上的计算机就可以彼此通信了。<br>问题是互联网是由一个个彼此隔离的子网组成的，<strong>广播出去的消息只有在同一子网内的主机才会收到</strong>，两个主机不在同一子网对端是收不到的，这种设计是合理的，如果一台主机发送的包全世界都会收到，这就不仅仅是效率低的问题了，这将会是一种灾难。<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-subnet.png" alt="" title="互联网子网关系图"><br>因此，必须找到一种方法，能够区分哪些MAC地址属于同一个子网络，哪些不是。如果是同一个子网络，就采用广播方式发送，否则就采用路由（向不同广播域/子网分发数据包）方式发送，遗憾的是，MAC地址本身无法做到这一点，它只与厂商有关，与所处网络无关。<br>至此网络层诞生了，它的作用是引进一套新的地址，使得我们能够区分不同的计算机是否属于同一个子网络，这套地址就叫做<strong>网络地址</strong>，简称<strong>网址</strong>。<br>网络层出现以后，每台计算机有了两种地址，一种是MAC地址，另一种是网络地址，两种地址之间没有任何联系，MAC地址是绑定在网卡上的，网络地址则是管理员分配的，它们只是随机组合在一起。<br>网络地址帮助我们确定计算机所在的子网络，MAC地址则将数据包送到该子网络中的目标网卡，因此，从逻辑上可以推断，必定是先处理网络地址，然后再处理MAC地址。</p><h3 id="IP协定"><a href="#IP协定" class="headerlink" title="IP协定"></a>IP协定</h3><p>规定网络地址的协议叫IP协议，它定义的地址称之为IP地址。<br>目前，广泛采用的是IP协议第四版，简称IPv4，IPv4规定网络地址由4字节点分十进制表示。<br>例如：127.0.0.1，范围：0.0.0.0 ~ 255.255.255.255<br>IP地址分成两部分，网络部分(标识子网)和主机部分(标识主机)，如果两个IP地址的网络部分相同，那就说明它们在同一子网内，但是我们不能确定IP地址中哪一部分是用来标识子网的，这就需要一个参数，<strong>子网掩码</strong>。</p><h3 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h3><p>子网掩码就是用来确定IP地址中网络特征的一个参数，它在形式上等同于IP地址，同样是4字节点分十进制表示，转为二进制以后它的网络部分全部为1、主机部分全部为0，然后与IP地址进行按位与（&amp;）运算，就可以得到IP地址中的网络部分。<br>例如：IP地址为：172.20.10.4，子网掩码为：255.255.255.0，那么就代表IP地址中前24位为网络部分，后8位为主机部分，就可以得出IP地址中的网络部分为：172.20.10.0</p><h3 id="IP数据包"><a href="#IP数据包" class="headerlink" title="IP数据包"></a>IP数据包</h3><p>IP数据包也分为Head和Data部分，如下图所示：<br><img src="../..//images/basic/basic-3-network-ip.png" alt="" title="IP数据包结构"><br>IP数据包最大长度为65535字节，为理论上的最大长度，但前面说过以太网数据包的Data部分最长只有1500字节，因此，如果IP数据包超过了1500字节，它就需要分割成多个以太网数据包，分开发送了。<br>以太网协议无须为IP数据包定义单独的栏位，直接放入以太网包的Data部分即可，如下图所示：<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-ethernet+ip.png" alt="" title="增加IP数据包后的以太网协议结构"></p><h3 id="ARP（Address-Resolution-Protocol）-RARP（Reverse-Address-Resolution-Protocol）"><a href="#ARP（Address-Resolution-Protocol）-RARP（Reverse-Address-Resolution-Protocol）" class="headerlink" title="ARP（Address Resolution Protocol）/RARP（Reverse Address Resolution Protocol）"></a>ARP（Address Resolution Protocol）/RARP（Reverse Address Resolution Protocol）</h3><p>因为IP数据包是放在以太网数据包里发送的，所以我们必须同时知道两个地址，一个是对方的MAC地址，另一个是对方的IP地址，对方的IP地址是已知的，但是我们不知道它的MAC地址，所以我们需要一种机制能够通过IP地址得到MAC地址，<strong>就是ARP — 地址解析协议</strong>。<br><strong>ARP — 地址解析协议</strong>，也是一个数据包，如下所示：<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-arp.png" alt="" title="ARP数据包结构"><br>ARP数据包同样包含在以太网数据包中，这个包会以广播的方式在发送端所处的子网内传输，在发送时目标主机MAC地址为FF:FF:FF:FF:FF:FF，表示这是一个广播地址，目标主机接收到ARP数据包后从中取出IP地址，与自身的IP地址进行比较，发现目标IP为本身的，就返回本身的MAC地址，否则就丢弃这个包。<br>需要注意的是，如果目标主机不在同一子网，那么ARP数据包中的目标主机IP为本机所在子网的网关IP。<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-ethernet+arp.png" alt="" title="增加ARP数据包后的以太网协议结构"><br><strong>RARP — 逆地址解析协议</strong>，功能和ARP协议相对，其将局域网中某个主机的MAC地址转换为IP地址。</p><h2 id="传输层（Transport-Layer）"><a href="#传输层（Transport-Layer）" class="headerlink" title="传输层（Transport Layer）"></a>传输层（Transport Layer）</h2><p>网络层的IP帮我们区分子网，数据链路层的MAC帮我们找到主机，然后大家使用的都是应用程序，你的电脑上可能同事运行多个应用程序如播放器、聊天软件等，那么我们通过IP和MAC找到了一台特定的主机，如何标识这台主机上的应用程序呢？<br>答案便是<strong>端口（Port）</strong>，端口即应用程序与网卡关联的编号，每个数据包都发到主机的特定端口，所以不同的程序就能取到自己所需要的数据。<br>端口是一个两字节的整数，范围是0到65535之间，0到1023的端口被系统占用，用户只能选用大于1023的端口，不管是浏览网页还是在线聊天，应用程序会随机选用一个端口，然后与服务器的相应端口联系。<br><strong>传输层的功能就是建立端口到端口的通信</strong>，相比之下<strong>网络层的功能是建立主机到主机的通信</strong>，只要确定主机和端口，我们就能实现程序之间的交流。<br>因此，Unix系统就把主机+端口，叫做Socket（下面会讲），有了它，就可以进行网络应用程序开发了。</p><h3 id="UDP（User-Datagram-Protocol）"><a href="#UDP（User-Datagram-Protocol）" class="headerlink" title="UDP（User Datagram Protocol）"></a>UDP（User Datagram Protocol）</h3><p>有了端口以后，我们必须在数据包中加入端口信息，这就需要新的协议，最简单的实现叫做UDP — 用户数据报协议，它的格式几乎就是在数据前面，加上端口号。<br>UDP数据包，也是由Head和Data两部分组成，UDP数据包总长度最大65535字节，Head部分为定长8字节，Data部分为变长65527字节，如下图所示：<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-udp.png" alt="" title="UDP数据包结构"><br>UDP数据包需要放在IP数据包的Data部分，IP数据包又是放在以太网数据包之中的，所以整个以太网数据包现在变成了下面这样：<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-ethernet+ip+udp.png" alt="" title="增加IP数据包和UDP数据包后的以太网协议结构"></p><h3 id="TCP（Transmission-Control-Protocol）"><a href="#TCP（Transmission-Control-Protocol）" class="headerlink" title="TCP（Transmission Control Protocol）"></a>TCP（Transmission Control Protocol）</h3><p>UDP协议的优点是比较简单，容易实现，但是缺点是可靠性较差，一旦数据包发出，无法知道对方是否收到。<br>为了解决这个问题，提高网络可靠性，TCP协议就诞生了，这个协议非常复杂，但可以近似认为，它就是有确认机制的UDP协议，每发出一个数据包都要求确认，如果有一个数据包遗失，收不到确认，发出方就会认为这个包发送失败重新发送这个数据包。<br>因此，TCP协议能够确保数据不会遗失，它的缺点是过程复杂、实现困难、消耗较多的资源。<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-tcp.png" alt="" title="TCP数据包结构"><br>TCP数据包，也是由Head和Data两部分组成，Head部分为定长20字节加变长4字节扩展，TCP数据包和UDP数据包一样，都是内嵌在IP数据包的Data部分，TCP数据包没有长度限制，理论上可以无限长，但是为了保证网络的效率，通常TCP数据包的长度不会超过IP数据包的长度，以确保单个TCP数据包不必再分割。<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-ethernet+ip+tcp.png" alt="" title="增加IP数据包和TCP数据包后的以太网协议结构"></p><h4 id="TCP-—-三次握手四次挥手"><a href="#TCP-—-三次握手四次挥手" class="headerlink" title="TCP — 三次握手四次挥手"></a>TCP — 三次握手四次挥手</h4><p>由于我们大部分使用的应用层协议都基于TCP协议通信，所以这里重点讲一下TCP协议。<br>上面说过了，<strong>TCP是基于连接的可靠性传输协议</strong>，TCP提供面向有连接的通信传输，面向有连接是指在数据通信开始之前先做好两端之间的准备工作，由此保证连接的可靠性。<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-tcp-link.png" alt="" title="TCP三次握手四次挥手"><br>如上图所示，TCP交互有三个阶段，<strong>连接创建、数据传输、连接销毁。</strong><br><strong>连接创建（三次握手）：</strong><br>创建连接需要三次握手，是指建立一个TCP连接时需要客户端和服务器端总共发送三个包以确认连接的建立（Socket编程中，由客户端执行connect函数来触发)。</p><ul><li>第一次握手：Client发送SYN包，请求建立新连接，Server收到Client发送的SYN包，此时Server知道：Client发送能力正常，自己的接收能力正常。</li><li>第二次握手：Server发送ACK包，表示收到Client发送的SYN包并同意创建新连接，Client收到Server发送的ACK包，此时Client知道：自己的收发能力都没问题，Server收发能力也没问题，但此时Server端还不知道自己的发送能力是否有问题，所以需要第三次握手。</li><li>第三次握手：Client发送ACK包，Server收到Client发送的ACK包，此时Server知道：Client和自己的发送和接收能力都没问题，到此连接创建阶段完成。<br><strong>数据传输：</strong><br>连接建立完成后，双方开始收发业务数据。<br><strong>连接销毁（四次挥手）：</strong></li><li>第一次挥手：Client发送FIN包，请求断开连接，Server收到Client发送的FIN包，此时Server知道：Client已经没有新数据发送给自己了。</li><li>第二次挥手：Server发送ACK包，告诉Client自己已经收到了断开连接请求，Client收到Server发送的ACK包，此时Client知道：Server端收到了自己的断开连接请求，但是还不知道Server端有没有数据给自己。</li><li>第三次挥手：Server发送FIN包，告诉Client自己也没有数据需要传输了，Client收到Server发送的FIN包，此时Client知道：Server也没有数据需要发送给自己了，但是Server不知道自己是否收到了这个通知，所以需要第四次挥手。</li><li>第四次挥手：Client发送ACK包，告诉Server自己已经收到了通知，至此，双方都可以确认对端不会再有数据发送给自己，断开连接。<h4 id="TCP-—-为什么握手需要三次，而挥手需要四次"><a href="#TCP-—-为什么握手需要三次，而挥手需要四次" class="headerlink" title="TCP — 为什么握手需要三次，而挥手需要四次"></a>TCP — 为什么握手需要三次，而挥手需要四次</h4>TCP连接在传输数据前需要双方需要确定对端的收发能力是否正常，以此为前提则必须要握手三次，可以查看上面三次握手流程。<br>那么为什么断开连接需要四次挥手呢，因为创建连接与断开连接有个本质区别就是断开连接前是可能有数据在传输的，正常情况断开连接的流程是由Client触发的，Server突然收到断开连接的请求，然后返回ACK包告诉Client自己已经收到请求，但是Server需要检查是否有数据在传输，由于TCP连接是全双工的，所以双方需要确定都不会进行数据传输后才可以关闭，Server检查并处理完正在传输的数据以后会主动给Client发送FIN包，告诉Client自己也没数据需要传输了，已经准备好断开连接了，这一步就是多出来的那一次挥手。</li></ul><h2 id="应用层（Application-Layer）"><a href="#应用层（Application-Layer）" class="headerlink" title="应用层（Application Layer）"></a>应用层（Application Layer）</h2><p>应用程序收到传输层的数据，接下来就要进行解读，由于互联网是开放架构，大家都可以开发本身的应用程序，数据来源五花八门，必须事先规定好格式，否则根本无法解读。<br>因此产生了应用层，作用就是规定应用程序的数据格式，这是最高的一层，直接面对用户，它的数据就放在TCP/UDP数据包的Data部分，于是到了应用层以太网的数据包就变成下面这样：<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-ethernet+application.png" alt="" title="增加IP数据包、TCP数据包和应用层数据后的以太网协议结构"></p><h3 id="DHCP（Dynamic-Host-Configuration-Protocol）"><a href="#DHCP（Dynamic-Host-Configuration-Protocol）" class="headerlink" title="DHCP（Dynamic Host Configuration Protocol）"></a>DHCP（Dynamic Host Configuration Protocol）</h3><p><strong>DHCP — 动态主机配置协议</strong>，它的数据包结构如下：<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-dhcp.png" alt="" title="DHCP数据包结构"><br>DHCP是建立在UDP协议上的应用层协议，整个数据包形式为：<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-ethernet+ip+udp+dhcp.png" alt="" title="增加IP数据包、UDP数据包和DHCP数据包后的以太网协议结构"><br>DHCP采用客户端（67端口）／服务器模式（68端口），客户端通过DHCP协议和DHCP服务交换信息，服务器会返回分配给客户端的网络地址信息（IP、子网掩码、网关地址、DNS服务器等等）。<br>DHCP提供三种IP分配方式：</p><ul><li>自动分配是当DHCP客户端第一次成功的从DHCP服务器获取一个IP地址后，就永久的使用这个IP地址。</li><li>手动分配是由DHCP服务器管理员专门指定的IP地址。</li><li>动态分配是当客户端第一次从DHCP服务器获取到IP地址后，并非永久使用该地址，每次使用完后，DHCP客户端就需要释放这个IP，供其他客户端使用。<h3 id="DNS（Domain-Name-System）"><a href="#DNS（Domain-Name-System）" class="headerlink" title="DNS（Domain Name System）"></a>DNS（Domain Name System）</h3><strong>DNS — 域名系统</strong>，是因特网的一项核心服务，它作为可以将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串，<strong>简单来说DNS就是维护域名与IP地址之间关系的系统。</strong><br>DNS协议使用了UDP和TCP两种协议，并占用对应协议的53端口，DNS数据包结构如下：<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-dns.png" alt="" title="DNS数据包结构"><br>增加了DNS数据包的以太网协议结构如下：<br><img src="/basic/basic-3-network/../../images/basic/basic-3-network-ethernet+ip+udp+tcp+dns.png" alt="" title="增加IP数据包、UDP/TCP数据包和DNS数据包后的以太网协议结构"><h3 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h3>我们知道两个进程如果需要进行通讯最基本的一个前提是能够唯一的标示一个进程，在本地进程通讯中我们可以使用PID来唯一标示一个进程，但PID只在本地唯一，网络中的两个进程PID冲突几率很大，这时候我们需要另辟它径了，我们知道网络层IP协议中的IP地址可以标识唯一主机，而传输层TCP/UDP协议的端口号可以唯一标示主机的一个进程，这样我们可以利用IP地址＋协议＋端口号精准标识出网络中的一个进程。<br>能够唯一标示网络中的进程后，它们就可以利用Socket进行通信了，什么是socket呢？<br>我们常常把Socket翻译为套接字，Socket是在应用层和传输层之间的一个抽象层，它把TCP/IP层复杂的操作抽象为几个简单的接口供应用层调用用来实现应用程序进程的网络通信。<br>Socket起源于UNIX，在UNIX一切皆文件哲学的思想下，Socket是一种<strong>打开—读/写—关闭</strong>模式的实现，服务器和客户端各自维护一个文件（SocketFD），在建立连接打开后，可以向本身文件写入内容供对方读取或者读取对方内容，通讯结束时关闭文件。</li></ul><h1 id="网络通信流程"><a href="#网络通信流程" class="headerlink" title="网络通信流程"></a>网络通信流程</h1><p>以访问<strong><a href="http://www.google.com" rel="external nofollow noopener noreferrer" target="_blank">www.google.com</a></strong>为例，来模拟一个完整的网络通信，用来梳理一下上面所讲到的知识。<br><strong>一台计算机要访问网络资源首先要连接网络，连接网络需要四个必要参数，IP地址、子网掩码、网关IP、DNS</strong>，获取IP地址分有两种方式，一是手动填写网络管理员分配的IP地址，二是通过DHCP服务动态获取IP地址，我们以第二种为例。</p><ol><li>通过DHCP服务获取IP地址、子网掩码、网关IP、DNS等网络信息，让计算机连接网络</li><li>然后浏览器输入网址<strong><a href="http://www.google.com" rel="external nofollow noopener noreferrer" target="_blank">www.google.com</a></strong>，经过DNS服务解析成目标主机的IP地址</li><li>由于访问www网址使用的是应用层的HTTP协议，浏览器生成HTTP请求数据包，假设生成HTTP请求包大小为2000字节。</li><li>HTTP数据包需要放置在传输层TCP协议的Data部分，TCP数据包Head部分需要设置通信双方的端口，HTTP协议默认端口80，所以目标端口为80，源端口为本机随机生成（1023 ~ 65535），由于TCP协议的Head部分为定长20字节，所以目前的数据包大小为2020字节。</li><li>然后TCP数据包需要放置在IP数据包的Data部分，IP数据包Head部分需要设置通信双方的IP地址，本机IP地址通过DHCP已经得知，目标主机IP地址通过DNS服务也知道了，由于IP协议的Head部分为定长20字节，所以目前的数据大小为2040字节。</li><li>最后IP数据包放置在数据链路层以太网帧的Data部分，以太网数据包Head部分需要设置通信双方的MAC地址，源MAC地址为本机网卡的MAC地址，目标MAC地址通过ARP协议得到，由于DNS服务返回<strong><a href="http://www.google.com" rel="external nofollow noopener noreferrer" target="_blank">www.google.com</a></strong>域名所对应的IP地址与本机IP不在同一子网，所以在发送ARP请求时ARP协议中的目标IP地址为本机所在子网的网关IP（DHCP返回），目标MAC地址则为<strong>FF:FF:FF:FF:FF:FF</strong>，表明这是一个广播地址。</li><li>由于以太网协议规定Data部分最大为1500字节，但是目前数据有2040字节，所以会分成两包发送。</li><li>经过多个网关的转发，google服务器收到来自我们本机的发送的两个以太网数帧，根据IP数据包Head部分的序号将两包数据拼接起来，取出完整的TCP数据，然后读取TCP数据包里面的的HTTP请求数据，接着做出HTTP响应，在用TCP协议发送回来，响应步骤和我们发送步骤一样，本机接收到来自google服务器的响应数据以后，将网页显示出来，到此，一次网络通讯就结束了。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;我们每天都在使用互联网，通过互联网聊天、购物、听音乐、看电影，全世界有几十亿台电脑通过互联网两两交互，那什么是互联网呢？&lt;br&gt;互联网的核心
      
    
    </summary>
    
      <category term="计算机基础" scheme="http://blog.onlinetool.com.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="http://blog.onlinetool.com.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="网络协议" scheme="http://blog.onlinetool.com.cn/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="互联网" scheme="http://blog.onlinetool.com.cn/tags/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础(2) --- 操作系统</title>
    <link href="http://blog.onlinetool.com.cn/basic/basic-2-os/"/>
    <id>http://blog.onlinetool.com.cn/basic/basic-2-os/</id>
    <published>2020-06-12T05:29:40.000Z</published>
    <updated>2020-09-25T03:37:14.684Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="计算机基础" scheme="http://blog.onlinetool.com.cn/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="计算机基础" scheme="http://blog.onlinetool.com.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    
      <category term="操作系统" scheme="http://blog.onlinetool.com.cn/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Netty指南（6）--- HTTP协议开发</title>
    <link href="http://blog.onlinetool.com.cn/netty/netty-guide-6-http/"/>
    <id>http://blog.onlinetool.com.cn/netty/netty-guide-6-http/</id>
    <published>2020-04-12T12:34:19.000Z</published>
    <updated>2020-09-25T03:37:14.688Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本章内容包括HTTP协议介绍、HTTP协议在Netty中的应用，并提供基于HTTP协议栈的Netty示例代码。</p><h3 id="HTTP介绍"><a href="#HTTP介绍" class="headerlink" title="HTTP介绍"></a>HTTP介绍</h3><p>HTTP — Hyper Text Transfer Protocol 超文本传输协议，是建立在TCP/IP传输协议上的应用层协议，它属于应用层的面向对象协议，由于其简洁、快速的方式，适用于分布式超媒体信息系统。<br>HTTP协议时目前Web开发的主流协议，基于HTTP的应用非常广泛，因此掌握HTTP的开发非常重要。<br>本文主要介绍基于Netty的HTTP协议栈开发，由于Netty的HTTP协议栈是基于NIO通信框架开发的，因此Netty的HTTP协议也是非阻塞的。</p><h4 id="HTTP-协议的特点"><a href="#HTTP-协议的特点" class="headerlink" title="HTTP 协议的特点"></a>HTTP 协议的特点</h4><ul><li>简单 — 客户向服务端请求服务时，只需要制定服务的URL，携带必要的请求参数或请求消息体。</li><li>灵活 — HTTP允许传输任意类型的数据对象，传输的内容类型由HTTP消息头中的ContentType标记。</li><li>无状态 — HTTP是无状态协议，无状态指协议对事务处理没有记忆功能，意味着后续请求处理需要之前的信息只能重传，这样可能导致每次传输数据量增大，但对于服务器不需要处理之前的信息时，就显得轻量。</li></ul><h4 id="HTTP-URL（Uniform-Resource-Locator）"><a href="#HTTP-URL（Uniform-Resource-Locator）" class="headerlink" title="HTTP URL（Uniform Resource Locator）"></a>HTTP URL（Uniform Resource Locator）</h4><ul><li>WWW：World Wide Web — 万维网</li><li>URL：Uniform Resource Locator — 统一资源定位符</li><li>URI：Uniform Resource Identifier — 统一资源标识符<br>URL是一种特殊类型的的URI，是WWW上每个信息资源统一且唯一的地址，它最初是由<strong> <a href="https://baike.baidu.com/item/蒂姆·伯纳斯·李" rel="external nofollow noopener noreferrer" target="_blank">Tim Berners-Lee</a> </strong>发明用来作为WWW的地址，现在它已经被万维网联盟编制为互联网标准RFC1738。<br>HTTP URL的地址如下：<br><strong> http :// host[:port] / abs_path </strong></li><li>http：表示要通过HTTP协议来定位网络资源。</li><li>host：表示合法的Internet主机域名或IP地址，以目前主流的IPV4协议为例，IPV4使用4字节点分十进制表示，例如：127.0.0.1</li><li>port：用于指定一个端口号，拥有被请求资源的服务器主机监听该端口的TCP连接，如果port是空，则使用缺省端口80，当服务器的端口不是80的时候，需要显式指定端口号。</li><li>abs_path：指定请求资源的URI，如果URL中没有给出abs_path，那么当它作为请求URI时，必须以“/”的形式给出，通常这个工作浏览器就帮我们完成了。</li></ul><h4 id="HTTP-Request"><a href="#HTTP-Request" class="headerlink" title="HTTP Request"></a>HTTP Request</h4><p>HTTP的请求消息由三部分组成，具体如下图所示。<br><img src="../../images/netty/netty-guide-6-http-request.png" alt="" title="HTTP请求消息结构"></p><h4 id="HTTP-Response"><a href="#HTTP-Response" class="headerlink" title="HTTP Response"></a>HTTP Response</h4><p>HTTP的响应消息由三部分组成，具体如下图所示。<br><img src="../../images/netty/netty-guide-6-http-response.png" alt="" title="HTTP响应消息结构"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本章内容包括HTTP协议介绍、HTTP协议在Netty中的应用，并提供基于HTTP协议栈的Netty示例代码。&lt;/p&gt;
&lt;h3 id=&quot;HT
      
    
    </summary>
    
      <category term="netty" scheme="http://blog.onlinetool.com.cn/categories/netty/"/>
    
    
      <category term="netty" scheme="http://blog.onlinetool.com.cn/tags/netty/"/>
    
      <category term="并发编程" scheme="http://blog.onlinetool.com.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="异步编程" scheme="http://blog.onlinetool.com.cn/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Netty指南（5）--- 编解码技术</title>
    <link href="http://blog.onlinetool.com.cn/netty/netty-guide-5-codec/"/>
    <id>http://blog.onlinetool.com.cn/netty/netty-guide-5-codec/</id>
    <published>2020-03-27T05:53:26.000Z</published>
    <updated>2020-09-25T03:37:14.688Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Netty提供了强大的编解码器框架，使得我们编写自定义的编解码器很容易，也容易封装重用。<br>在网络应用中需要实现某种编解码器，将原始字节数据与自定义的消息对象进行互相转换。<br>网络中都是以字节码的数据形式来传输数据的，服务器编码数据后发送到客户端，客户端需要对数据进行解码。<br>编码：将消息对象转成字节或其他序列形式在网络上传输<br>解码：负责将消息从字节或其他序列形式转成指定的消息对象</p><h3 id="TCP粘包-拆包解码器"><a href="#TCP粘包-拆包解码器" class="headerlink" title="TCP粘包/拆包解码器"></a>TCP粘包/拆包解码器</h3><p>上层的应用协议为了对消息进行区分，往往采用如下4种方式，也就是我们上一节中讲到的TCP粘包/拆包问题的4种解决方案：</p><ol><li>将消息长度固定，例如将消息长度len = 100，累计读到100字节后就认为读到了一个完整的消息。</li><li>将回车换行符（System.getProperty(“line.separator”)）作为消息结束符，例如FTP协议，这种方式在问本协议中应用比较广泛。</li><li>将特殊的分割符作为消息的结束标志，回车换行符就是一种特殊的结束分隔符。</li><li>将消息分为消息头和消息体，消息头中包含消息总长度或消息体长度的字段。</li></ol><p>Netty对这4种方式做了统一抽象，提供了4种解码器来解决对应的问题，下面我们分别介绍一下这4种解码器。<br>由于下面介绍的4种解码器都是为了解决TCP粘包/拆包，所以为了保证发生TCP粘包/拆包现象，每个示例代码中client端都会连续发送多条消息到server。</p><h4 id="FixedLengthFrameDecoder"><a href="#FixedLengthFrameDecoder" class="headerlink" title="FixedLengthFrameDecoder"></a>FixedLengthFrameDecoder</h4><p>FixedLengthFrameDecoder可以处理长度固定的消息，它有1个参数，int frameLength，当累计读到frameLength个Byte的时候就认为读到了一个完整的消息。</p><table><thead><tr><th style="text-align:left">Type</th><th style="text-align:left">Name</th><th style="text-align:left">Describe</th></tr></thead><tbody><tr><td style="text-align:left">int</td><td style="text-align:left">frameLength</td><td style="text-align:left">帧长度，当累计读到frameLength个Byte的时候就认为读到了一个完整的消息</td></tr></tbody></table><p><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master/src/main/java/cn/com/onlinetool/codec/frame/fixedlength/" rel="external nofollow noopener noreferrer" target="_blank">点击查看FixedLengthFrameDecoder解码器完整示例代码</a> </strong><br>示例代码中client向server发送100条消息，由于我们演示的是定长消息解码器，但client与server消息长度不一致，所以server端并没有发送响应消息给client，所以查看server端接收消息的日志即可，你会发现并没有出现TCP粘包/拆包现象。</p><h4 id="LineBasedFrameDecoder"><a href="#LineBasedFrameDecoder" class="headerlink" title="LineBasedFrameDecoder"></a>LineBasedFrameDecoder</h4><p>LineBasedFrameDecoder可以处理以回车换行符结尾的消息，它有如下3个参数：</p><table><thead><tr><th style="text-align:left">Type</th><th style="text-align:left">Name</th><th style="text-align:left">Describe</th></tr></thead><tbody><tr><td style="text-align:left">int</td><td style="text-align:left">maxLength</td><td style="text-align:left">整帧数据的最大长度，整帧数据长度超过maxLength会抛出TooLongFrameException异常。</td></tr><tr><td style="text-align:left">boolean</td><td style="text-align:left">stripDelimiter</td><td style="text-align:left">stripDelimiter = true：解码后的消息中去掉分隔符<br>stripDelimiter = false：解码后的消息中包含分隔符<br>默认：stripDelimiter = true</td></tr><tr><td style="text-align:left">boolean</td><td style="text-align:left">failFast</td><td style="text-align:left">failFast = true：消息长度超过 maxLength 是否立即抛出异常<br>failFast = false：读取到换行符以后才抛出异常<br>默认：failFast = false。</td></tr></tbody></table><p><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master/src/main/java/cn/com/onlinetool/frame/line/" rel="external nofollow noopener noreferrer" target="_blank">点击查看LineBasedFrameDecoder解码器完整示例代码</a> </strong><br>示例代码中我们同样是让client向server发送100条消息，并在消息结尾增加换行符（System.getProperty(“line.separator”)），运行代码你会发现client与server消息都被正常处理了。</p><h4 id="DelimiterBasedFrameDecoder"><a href="#DelimiterBasedFrameDecoder" class="headerlink" title="DelimiterBasedFrameDecoder"></a>DelimiterBasedFrameDecoder</h4><p>DelimiterBasedFrameDecoder可以处理以自定义分隔符结尾的消息，你可以定义任何符号，只要是你数据中用不到的符号都可以，它有4个参数和1个特殊的可变长参数：</p><table><thead><tr><th style="text-align:left">Type</th><th style="text-align:left">Name</th><th style="text-align:left">Describe</th></tr></thead><tbody><tr><td style="text-align:left">int</td><td style="text-align:left">maxLength</td><td style="text-align:left">整帧数据的最大长度，整帧数据长度超过maxLength会抛出TooLongFrameException异常。</td></tr><tr><td style="text-align:left">boolean</td><td style="text-align:left">stripDelimiter</td><td style="text-align:left">failFast = true：解码后的消息中去掉分隔符<br>failFast = false：解码后的消息中包含分隔符<br>默认：failFast = true</td></tr><tr><td style="text-align:left">boolean</td><td style="text-align:left">failFast</td><td style="text-align:left">failFast = true：整帧数据长度超过 maxLength 是否立即抛出异常<br>failFast = false：读取到换行符以后才抛出异常<br>默认：failFast = false</td></tr><tr><td style="text-align:left">ByteBuf</td><td style="text-align:left">delimiter</td><td style="text-align:left">消息的分隔符，将你定义的分隔符转为ByteBuf传入<br>例如 <code>Unpooled.copiedBuffer(&quot;^_^&quot;.getBytes())</code></td></tr><tr><td style="text-align:left">ByteBuf…</td><td style="text-align:left">delimiters</td><td style="text-align:left">与delimiter的区别是，这是个可变长参数，它允许你以ByteBuf[]数组形式传入多个分隔符<br>例如<code>new ByteBuf[]{Unpooled.copiedBuffer(&quot;^_^&quot;.getBytes()),Unpooled.copiedBuffer(&quot;#_#&quot;.getBytes())}</code></td></tr></tbody></table><p><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master/src/main/java/cn/com/onlinetool/frame/delimiter/" rel="external nofollow noopener noreferrer" target="_blank">点击查看DelimiterBasedFrameDecoder解码器完整示例代码</a> </strong></p><h4 id="LengthFieldBasedFrameDecoder"><a href="#LengthFieldBasedFrameDecoder" class="headerlink" title="LengthFieldBasedFrameDecoder"></a>LengthFieldBasedFrameDecoder</h4><p>LengthFieldBasedFrameDecoder可以处理自定义length字段的可变长消息，它需要你的业务协议中包含length字段，根据读取到的length字段来计算整帧数据的长度，它有如下7个参数：</p><table><thead><tr><th style="text-align:left">Type</th><th style="text-align:left">Name</th><th style="text-align:left">Describe</th></tr></thead><tbody><tr><td style="text-align:left">ByteOrder</td><td style="text-align:left">byteOrder</td><td style="text-align:left">字节序<br>大端序：byteOrder = ByteOrder.BIG_ENDIAN<br>小端序：byteOrder = ByteOrder.LITTLE_ENDIAN<br>Java采用大端字节序保存数据，如果你的业务协议本身就是大端字节序，则就无需设置。                             </td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">maxFrameLength</td><td style="text-align:left">完整数据包的最大长度，整帧长度超过maxFrameLength会抛出TooLongFrameException异常。</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">lengthFieldOffset</td><td style="text-align:left">整帧数据中length字段的起始索引</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">lengthFieldLength</td><td style="text-align:left">整帧数据中length字段所占字节长度</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">lengthAdjustment</td><td style="text-align:left">length字段的补偿值，这个值的设置取决于你业务协议中length字段的值，如果length字段为整包长度，那么lengthAdjustment的值一般为负值，如果length字段为数据体长度，数据体后面还有数据的话，就要通过lengthAdjustment告诉解码器后面还有多少个字节的数据。</td></tr><tr><td style="text-align:left">int</td><td style="text-align:left">initialBytesToStrip</td><td style="text-align:left">从解码帧中取出的第一个字节数，可以理解为需要调过的字节数，比如完整数据包长度10字节，length字段占用4字节，剩下6字节为数据体，如果你想只保留数据体，你可将lengthAdjustment=4，length字段所占用的4字节就会被丢弃。</td></tr><tr><td style="text-align:left">boolean</td><td style="text-align:left">failFast</td><td style="text-align:left">failFast = true：整帧数据长度超过 maxLength 是否立即抛出异常<br>failFast = false：读取到换行符以后才抛出异常<br>默认：failFast = false</td></tr></tbody></table><p><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master/src/main/java/cn/com/onlinetool/frame/lengthfield/" rel="external nofollow noopener noreferrer" target="_blank">点击查看LengthFieldBasedFrameDecoder解码器完整示例代码</a> </strong></p><h3 id="自定义编解码器"><a href="#自定义编解码器" class="headerlink" title="自定义编解码器"></a>自定义编解码器</h3><p>Netty为我们抽象了编解码操作，在Netty程序中我们只需要继承下面对应的抽象类，重写其对应的编解码方法，并把编解码器追加到ChannelPipeline中，Netty就会执行我们自定义的编解码器。</p><ul><li>MessageToByteEncoder  通过重写encode方法，将用户定义的类型转化为byte类型</li><li>MessageToMessageEncoder   通过重写encode方法，将用户定义的类型转化为另外一种用户定义的类型</li><li>ByteToMessageDecoder  通过重写decode方法，将byte类型转化为用户定义的类型</li><li>MessageToMessageDecoder   通过重写decode方法，将用户定义的类型转化为另外一种用户定义的类型</li></ul><p>下面链接的代码中，我们分别实现了2个编码器和2个解码器，为了让示例代码变得更加简单，我没有创建自定义的Java对象，而是直接使用字符串类型来代替我们自定义的对象。<br>自定义编解码器示例代码及client与server的编解码器调用流程图如下：<br><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master//src/main/java/cn/com/onlinetool/codec/diy" rel="external nofollow noopener noreferrer" target="_blank">点击查看Netty自定义编解码器完整示例代码</a> </strong><br><img src="/netty/netty-guide-5-codec/../../images/netty/netty-guide-5-codec-diy.png" alt="" title="示例代码自定义编解码器调用流程图"></p><h3 id="Java原生序列化存在的问题"><a href="#Java原生序列化存在的问题" class="headerlink" title="Java原生序列化存在的问题"></a>Java原生序列化存在的问题</h3><p>Java原生序列化起源于JDK1.1，他不需要添加额外的类库，只需要 implements java.io.Serializable 并生成 serialVersionUID 即可，应用广泛。<br>但是在远程服务调用（RPC）时很少使用Java原生序列化进行消息的编解码和传输，这是为什么呢，下面来分析一下Java序列化的缺点。</p><h4 id="无法跨语言"><a href="#无法跨语言" class="headerlink" title="无法跨语言"></a>无法跨语言</h4><p>这是Java原生序列化的致命问题，对于跨进程调用，对端很可能使用其他语言，如C++、Python等，当我们需要和异构语言的程序交互时，Java原生序列化就难以胜任了。<br>由于Java序列化是Java语言内部的私有协议，其他语言并不支持，对于用户来说它完全是黑盒，使用Java原生序列化后的字节数组，其他语言是没有办法反序列化的，所以目前几乎所有流行的Java RPC通信框架都没有使用Java原生序列化作为编解码框架，主要原因就在于它无法跨语言。</p><h4 id="序列化后的码流太大"><a href="#序列化后的码流太大" class="headerlink" title="序列化后的码流太大"></a>序列化后的码流太大</h4><p><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master/src/main/java/cn/com/onlinetool/codec/serializable/test/streamsize/" rel="external nofollow noopener noreferrer" target="_blank">点击查看Java原生序列化码流大小测试完整示例代码</a> </strong><br>测试代码的运行结果表明，Java原生序列化的码流大小 是 二进制编码 6倍左右，受数据影响可能差距更大。<br>评价一个编解码框架往往会考虑以下因素：</p><ul><li>是否支持跨语言，支持的语言种类是否丰富</li><li>编码后的码流大小</li><li>编解码性能</li><li>类库是否轻量，API是否简单易用<br>在同等情况下，编码后的码流越大，存储的时候占用的空间就越大，硬件成本就越高，在网络传输中占用带宽越高，进而导致系统吞吐量降低。<br>所以Java原生序列化，除了无法跨语言，码流太大也是一个很大的缺点。</li></ul><h4 id="序列化性能低"><a href="#序列化性能低" class="headerlink" title="序列化性能低"></a>序列化性能低</h4><p><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master//src/main/java/cn/com/onlinetool/codec/serializable/test/performance/" rel="external nofollow noopener noreferrer" target="_blank">点击查看Java原生序列化性能测试完整示例代码</a> </strong><br>测试代码的运行结果表明，在100w次的序列化测试中，Java原生序列化耗时 是 二进制序列化 7倍左右，受数据影响可能差距更大。<br>但也足以表明Java原生序列化 无论是 码流大小 还是 性能，都表现的很差，因此我们通常不会选择Java序列化作为RPC调用的编解码框架。</p><h3 id="主流第三方编解码框架"><a href="#主流第三方编解码框架" class="headerlink" title="主流第三方编解码框架"></a>主流第三方编解码框架</h3><p>下面介绍一些业界主流的编解码框架，并提供示例代码。</p><h4 id="MessagePack"><a href="#MessagePack" class="headerlink" title="MessagePack"></a>MessagePack</h4><p>MessagePack是一个高效的二进制序列化框架，与JSON类似，支持不同语言间的数据交换，但MessagePack的性能更高，编码后的码流更小。<br><strong> <a href="https://msgpack.org/" rel="external nofollow noopener noreferrer" target="_blank">MessagePack官网</a> </strong><br><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master//src/main/java/cn/com/onlinetool/codec/msgpack/" rel="external nofollow noopener noreferrer" target="_blank">点击查看MessagePack编解码完整示例代码</a> </strong></p><h4 id="Protobuf"><a href="#Protobuf" class="headerlink" title="Protobuf"></a>Protobuf</h4><p>Protobuf — Google Protocol Buffer，由Google开源的一款结构化数据序列化框架，相比于传统的MXL/JSON等，它更小，更快。<br>它将数据结构以<strong> .proto </strong>文件进行描述，通过代码生成工具可以生成数据结构对应的对象和Protobuf相关的属性和方法。<br><strong> <a href="https://developers.google.cn/protocol-buffers/" rel="external nofollow noopener noreferrer" target="_blank">Protobuf官网</a> </strong><br><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master//src/main/java/cn/com/onlinetool/codec/protobuf/" rel="external nofollow noopener noreferrer" target="_blank">点击查看Protobuf编解码完整示例代码</a> </strong></p><h4 id="Marshalling"><a href="#Marshalling" class="headerlink" title="Marshalling"></a>Marshalling</h4><p>Marshalling 是由 JBoss开源的一个Java序列化框架，它修正了JDK自带序列化包的很多问题，但又保持和 <strong> java.io.Serializable </strong> 接口的兼容，同时增加了可调参数和特性可通过工厂类进行配置。<br><strong> <a href="https://jbossmarshalling.jboss.org/" rel="external nofollow noopener noreferrer" target="_blank">Marshalling官网</a> </strong><br><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master//src/main/java/cn/com/onlinetool/codec/marshalling/" rel="external nofollow noopener noreferrer" target="_blank">点击查看Marshalling编解码完整示例代码</a> </strong></p><style>table th:first-of-type {    width: 15%;}table th:nth-of-type(2) {    width: 25%;}table th:nth-of-type(3) {    width: 60%;}</style>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Netty提供了强大的编解码器框架，使得我们编写自定义的编解码器很容易，也容易封装重用。&lt;br&gt;在网络应用中需要实现某种编解码器，将原始字节
      
    
    </summary>
    
      <category term="netty" scheme="http://blog.onlinetool.com.cn/categories/netty/"/>
    
    
      <category term="netty" scheme="http://blog.onlinetool.com.cn/tags/netty/"/>
    
      <category term="并发编程" scheme="http://blog.onlinetool.com.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="异步编程" scheme="http://blog.onlinetool.com.cn/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Netty指南（4）--- TCP粘包/拆包</title>
    <link href="http://blog.onlinetool.com.cn/netty/netty-guide-4-unpacking/"/>
    <id>http://blog.onlinetool.com.cn/netty/netty-guide-4-unpacking/</id>
    <published>2020-03-26T08:10:53.000Z</published>
    <updated>2020-09-25T03:37:14.688Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本节我们会介绍TCP的粘包和拆包，什么是TCP粘包/拆包，怎么解决粘包问题，以及代码演示。</p><h3 id="TCP粘包-拆包介绍"><a href="#TCP粘包-拆包介绍" class="headerlink" title="TCP粘包/拆包介绍"></a>TCP粘包/拆包介绍</h3><p>TCP是个”流”协议，没有界限，因为TCP底层并不了解上层业务数据的具体含义，它会根据TCP缓冲区的实际情况进行包的划分。<br>一个完整的数据包可能会被TCP拆分成多个包进行发送，也可能把多个小的包封装成一个大的数据包发送，这就是TCP粘包/拆包的由来。<br><img src="/netty/netty-guide-4-unpacking/../../images/netty/netty-guide-4-unpacking-tcp-unpacking.png" alt="" title="TCP粘包/拆包-图片来自《Netty权威指南》"><br>上图以两个完整数据包（D1、D2）为例，演示了可能发生的4种情况，分别如下：</p><ol><li>服务器分两次读到了两个独立数据包，分别是D1和D2，没有发生粘包和拆包。</li><li>服务器一次接受到了两个数据包，D1和D2粘在了一起，被称为TCP粘包。</li><li>服务器分两次读到了两个数据包，第一次读到了完整的D1+部分D2，第二次读到了D2的剩余部分，被称为TCP拆包。</li><li>服务器分两次读到了两个数据包，第一次读到了D1的一部分，第二次读到了D1剩余部分+D2完整包，这种即发生了粘包现象也发生了拆包现象。</li></ol><h3 id="TCP粘包-拆包问题的原因"><a href="#TCP粘包-拆包问题的原因" class="headerlink" title="TCP粘包/拆包问题的原因"></a>TCP粘包/拆包问题的原因</h3><p>导致发生TCP粘包/拆包现象的原因有三个，分别如下：</p><ol><li>应用程序write写入的字节数量大于套接口发送缓冲区的大小。</li><li>进行MSS(maximum segment size，最大分节大小，为TCP数据包每次传输的最大数据分段大小，一般由发送端向对端TCP通知对端在每个分节中能发送的最大TCP数据。）大小的TCP分段。</li><li>以太网帧的payload大于MTU（maximum transmission unit，最大传输单元，由硬件规定，如以太网的MTU为1500字节，其中包括 IPHeader（20Byte）TCPHeader（20Byte））进行IP分片。<br><img src="/netty/netty-guide-4-unpacking/../../images/netty/netty-guide-4-unpacking-tcp-unpacking-reason.png" alt="" title="TCP粘包/拆包问题的原因-图片来自《Netty权威指南》"></li></ol><h3 id="TCP粘包-拆包的解决方案"><a href="#TCP粘包-拆包的解决方案" class="headerlink" title="TCP粘包/拆包的解决方案"></a>TCP粘包/拆包的解决方案</h3><p>由于底层TCP无法理解上层业务数据，所以底层无法保证数据不被拆分和重组，这个问题只能通过上层的应用协议栈设计来解决，有如下几种解决方案：</p><ol><li>将消息长度固定，例如将消息长度len = 100，累计读到100字节后就认为读到了一个完整的消息。</li><li>将回车换行符（System.getProperty(“line.separator”)）作为消息结束符，例如FTP协议，这种方式在问本协议中应用比较广泛。</li><li>将特殊的分割符作为消息的结束标志，回车换行符就是一种特殊的结束分隔符。</li><li>将消息分为消息头和消息体，消息头中包含消息总长度或消息体长度的字段。</li></ol><h3 id="未处理TCP粘包导致的功能异常案例"><a href="#未处理TCP粘包导致的功能异常案例" class="headerlink" title="未处理TCP粘包导致的功能异常案例"></a>未处理TCP粘包导致的功能异常案例</h3><p>我们之前提供的所有示例代码中都没有包含，TCP粘包/拆包的处理，在功能测试上一般不会出现问题，但是一旦客户端增多服务器的压力增加，或者发送较大数据包时就会出现粘包/拆包问题。<br>如果程序没有处理粘包/拆包，往往会出现解码错误的错误，导致程序不能正常工作。<br>我为了制造TCP粘包/拆包的问题，将客户端向服务器发送消息的代码块增加了循环，发送100次消息给服务器，并增加了计数。<br><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master/src/main/java/cn/com/onlinetool/sticky/falser" rel="external nofollow noopener noreferrer" target="_blank">点击查看Netty未处理TCP粘包导致的功能异常案例完整示例代码</a> </strong><br>启动上面代码的客户端和服务器查看结果，你会发现服务器只收到了一个消息，并回复了一个应答，由于客户端发送的消息发生粘包，不满足时间服务器查询条件，所以返回了 “QUERY FAIL”。</p><h3 id="处理了TCP粘包的正常功能案例"><a href="#处理了TCP粘包的正常功能案例" class="headerlink" title="处理了TCP粘包的正常功能案例"></a>处理了TCP粘包的正常功能案例</h3><p>我们再看处理了TCP粘包/拆包的程序，由于我们的实例程序比较简单，只操作字符串，因此代码中我在客户端发给服务器的消息和服务器返回给客户端的消息后面增加了换行分隔符（System.getProperty(“line.separator”)）,并且使用了Netty内置的解码器 LineBasedFrameDecoder 来解决TCP粘包问题。<br>为了解决TCP粘包/拆包导致的读写问题，Netty默认提供了多种编解码器用于处理粘包问题，你也可以自己实现编解码器，关于Netty编解码器我们下节会介绍，这里不展开详述。<br><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master/src/main/java/cn/com/onlinetool/sticky/truer/" rel="external nofollow noopener noreferrer" target="_blank">点击查看Netty处理了TCP粘包的正常功能案例完整示例代码</a> </strong><br>启动上面代码的客户端和服务器查看结果，你会发现服务器收到了100条客户端的请求消息消息，客户端同样收到了100条服务器的响应消息消息，并给出了正确的响应内容，这说明我们已经正确的处理了TCP的粘包问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本节我们会介绍TCP的粘包和拆包，什么是TCP粘包/拆包，怎么解决粘包问题，以及代码演示。&lt;/p&gt;
&lt;h3 id=&quot;TCP粘包-拆包介绍&quot;&gt;
      
    
    </summary>
    
      <category term="netty" scheme="http://blog.onlinetool.com.cn/categories/netty/"/>
    
    
      <category term="netty" scheme="http://blog.onlinetool.com.cn/tags/netty/"/>
    
      <category term="并发编程" scheme="http://blog.onlinetool.com.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="异步编程" scheme="http://blog.onlinetool.com.cn/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Netty指南（3）--- Netty入门</title>
    <link href="http://blog.onlinetool.com.cn/netty/netty-guide-3-basic/"/>
    <id>http://blog.onlinetool.com.cn/netty/netty-guide-3-basic/</id>
    <published>2020-03-25T08:12:53.000Z</published>
    <updated>2020-09-25T03:37:14.688Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文我们将会介绍什么是Netty，为什么要选择Netty，以及Netty的特性。</p><h3 id="什么是Netty"><a href="#什么是Netty" class="headerlink" title="什么是Netty"></a>什么是Netty</h3><p>Netty是一个Java语言开发的高性能非阻塞I/O client/server框架，它支持快速、简单的开发client/server网络应用程序，大大简化了网络编程，如：TCP、UDP套接字服务器等。<br>Netty的”快速而简单”并不意味着使用它开发出的应用程序会遭遇可维护性或性能问题，Netty经过非常精心的设计（也许这就是艺术），积累了多种协议（FTP、SMTP、HTTP、各种二进制协议和基于文本的遗留协议）实现的经验。</p><h3 id="选择Netyy的理由"><a href="#选择Netyy的理由" class="headerlink" title="选择Netyy的理由"></a>选择Netyy的理由</h3><h4 id="为什么不使用原生NIO类库进行开发"><a href="#为什么不使用原生NIO类库进行开发" class="headerlink" title="为什么不使用原生NIO类库进行开发"></a>为什么不使用原生NIO类库进行开发</h4><ul><li>NIO类库和API繁杂且使用麻烦，需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等。</li><li>需要具备其他的额外技能做铺垫，例如熟悉Java多线程编程，这是因为NIO编程设计Reactor模式，必须对多线程和网络编程非常熟悉，才能编写出高质量的NIO程序。</li><li>可靠性能力补齐，工作量和难度都非常大，例如客户端重连、半包读写、失败缓存、异常码流的处理等问题，且还需要很好的模块设计才能保证代码更改起来不会牵一发动全身。</li><li>JDK NIO的BUG，例如epoll bug，它会导致Selector空轮询，最终导致CPU 100%，官方称JDK 1.6（6u4）版本修复了该问题，但直到JDK 1.7版本该问题依旧存在，只是发生概率降低了而已，如果你想了解该bug的细节，可以点击下面两个链接查看。<br><strong> <a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=2147719" rel="external nofollow noopener noreferrer" target="_blank">点击查看JDK NIO epoll bug详情</a> </strong><br><strong> <a href="https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6403933" rel="external nofollow noopener noreferrer" target="_blank">点击查看JDK NIO epoll bug详情</a> </strong><h4 id="为什么选择Netty"><a href="#为什么选择Netty" class="headerlink" title="为什么选择Netty"></a>为什么选择Netty</h4></li><li>Netty是业界流行的NIO框架之一，它的健壮性、功能、性能、可定制和可扩展性是目前NIO框架中最好的，它已经得到成千上万的商用项目验证。</li><li>统一的API，使用简单，支持多种传输类型，阻塞或非阻塞的，内置了多种编解码功能，支持多种主流协议。</li><li>易于使用，完备的Javadoc和大量的示例集。</li><li>高性能，拥有比Java的核心API更高的吞吐量以及更低的延迟，得益于池话和服用，拥有更低的资源消耗，最少的内存复制。</li><li>健壮性强，不会因为慢速、快速或超载的连接而导致OutOfMemoryError，消除在高速网络中NIO应用程序常见的不公平读/写问题。</li><li>安全性，完整的SSL/TSL/StartTLS支持</li><li>定制能力强，可以通过ChannelHandler对通信框架进行灵活的扩展。</li><li>成熟、稳定，Netty修复了已经被发现的所有JDK NIO Bug，业务开发人员不需要为JDK NIO本身存在的问题而苦恼。</li><li>社区活跃，版本迭代周期短，发现Bug能被及时修复。</li></ul><h3 id="使用JDK-NIO开发与使用Netty的对比"><a href="#使用JDK-NIO开发与使用Netty的对比" class="headerlink" title="使用JDK NIO开发与使用Netty的对比"></a>使用JDK NIO开发与使用Netty的对比</h3><p>下面是两种方式编写一个非常简单的NIO程序的流程，流程中不涉及TCP粘包拆包和编解码细节。</p><h4 id="使用JDK-NIO的开发流程"><a href="#使用JDK-NIO的开发流程" class="headerlink" title="使用JDK NIO的开发流程"></a>使用JDK NIO的开发流程</h4><ul><li>创建ServerSocketChannel，并配置它为非阻塞模式；</li><li>绑定监听，配置TCP参数，例如backlog、sndbuf等；</li><li>创建一个独立的I/O线程，用于轮询Selector；</li><li>创建Selector，将之间创建的ServerSocketChannel注册到Selector上，监听SelectionKey.ACCEPT；</li><li>启动I/O线程，再循环体重执行Selector.select()方法，轮询就绪的Channel；</li><li>当轮询到了就绪状态的Channel是，需要判断其状态，如果是ACCEPT状态，说明是新接入的客户端，则调用ServerSocketChannel.accept()接受客户端连接；</li><li>将SocketChannel注册到Selector上，监听OP_READ操作位；</li><li>如果Channel状态为OP_READ，则说明SocketChannel有新的就绪的数据包需要读取，则构造ByteBuffer读取数据包；</li><li>如果Channel状态为OP_WRITE，说明还有数据没有发送完成，需要继续发送。<h4 id="使用Netty-NIO的开发流程"><a href="#使用Netty-NIO的开发流程" class="headerlink" title="使用Netty NIO的开发流程"></a>使用Netty NIO的开发流程</h4></li><li>创建 NIO 线程组 EventLoopGroup 和 ServerBootstrap。</li><li>设置 ServerBootstrap 的属性：线程组、SO_BACKLOG 选项，设置 NioServerSocketChannel 为 Channel，设置业务处理 Handler。</li><li>绑定端口，启动服务器程序。</li><li>在业务处理 TimeServerHandler 中，读取客户端发送的数据，并给出响应。<br>可以看到，Netty把NIO开发中的很多细节帮我们做了，比如：不需要操作Selector，不需要手动从SocketChannel中读取数据并转换完ByteBuffer等问题，我们只需要考虑业务处理就可以了。<br>从语言描述上体会可能不是很深，你可以点击下方连接查看代码，与之前的JDK NIO代码进行对比，你会更直观的体会出Netty的”简单与快速”。<br><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master/src/main/java/cn/com/onlinetool/basic/" rel="external nofollow noopener noreferrer" target="_blank">点击查看Netty NIO完整示例代码</a> </strong></li></ul><h3 id="Netty核心组件"><a href="#Netty核心组件" class="headerlink" title="Netty核心组件"></a>Netty核心组件</h3><p>以下组件目前有个概念即可，后续会有章节单独详细的讲解。<br>下面我们简单的介绍一下Netty中的核心组件：</p><ul><li>Channel</li><li>ByteBuf</li><li>EventLoop</li><li>Future</li><li>ChannelPipeline</li><li>ChannelHandler<br>这些模块代表了不同类型的构建、资源、逻辑及通知，应用程序将使用它们来访问网络以及流经网络的数据。</li></ul><h4 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h4><p>基本的 I/O 操作(bind()、connect()、read()和 write())依赖于底层网络传输所提 供的原语。<br>在基于 Java 的网络编程中，其基本的构造是 class Socket。Netty 的 Channel 接 口所提供的 API，大大地降低了直接使用 Socket 类的复杂性。<br>此外，Channel 也是拥有许多预定义的、专门化实现的广泛类层次结构的根。<br>下面是一个简短的部分清单:</p><ul><li>EmbeddedChannel — Netty专门为改进针对ChannelHandler的单元测试的一种特殊Channel实现</li><li>LocalServerChannel — Netty提供的用来在同一个JVM内部实现client和server之间通信的transport</li><li>NioDatagramChannel — Netty提供的UDP数据包的channel</li><li>NioSctpChannel — 异步的客户端 Sctp 连接</li><li>NioSocketChannel</li></ul><h4 id="ByteBuf"><a href="#ByteBuf" class="headerlink" title="ByteBuf"></a>ByteBuf</h4><p>Java NIO 提供了 ByteBuffer 作为它 的字节容器，但是这个类使用起来过于复杂，而且也有些繁琐。<br>Netty 的 ByteBuffer 替代品是 ByteBuf，一个强大的实现，既解决了 JDK API 的局限性， 又为网络应用程序的开发者提供了更好的 API。</p><h4 id="EventLoop（Reactor线程组）"><a href="#EventLoop（Reactor线程组）" class="headerlink" title="EventLoop（Reactor线程组）"></a>EventLoop（Reactor线程组）</h4><p>EventLoop 定义了 Netty 的核心抽象，用于处理连接的生命周期中所发生的事件。</p><ul><li>一个 EventLoopGroup 包含一个或者多个 EventLoop;</li><li>一个 EventLoop 在它的生命周期内只和一个 Thread 绑定;</li><li>所有由 EventLoop 处理的 I/O 事件都将在它专有的 Thread 上被处理;</li><li>一个 Channel 在它的生命周期内只注册于一个 EventLoop;</li><li>一个 EventLoop 可能会被分配给一个或多个 Channel。</li></ul><p>下图为Channel、EventLoop、Thread 以及 EventLoopGroup 之间的关系。<br><img src="/netty/netty-guide-3-basic/../../images/netty/netty-guide-3-basic-channel-eventloop-relation.png" alt="" title="Channel、EventLoop、EventLoopGroup关系图"></p><h4 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h4><p>Future 提供了另一种在操作完成时通知应用程序的方式。<br>这个对象可以看作是一个异步操作的结果的占位符;它将在未来的某个时刻完成，并提供对其结果的访问。<br>JDK预置了 interface java.util.concurrent.Future，但是其所提供的实现，只允许手动检查对应的操作是否已经完成，或者一直阻塞直到它完成。<br>这是非常繁琐的，所以 Netty 提供了它自己的实现 ChannelFuture，用于在执行异步操作的时候使用。<br>ChannelFuture提供了几种额外的方法，这些方法使得我们能够注册一个或者多个 ChannelFutureListener实例。监听器的回调方法operationComplete()，将会在对应的 操作完成时被调用。<br>然后监听器可以判断该操作是成功地完成了还是出错了。如果是后者，我们可以检索产生的Throwable。简而言之 ，由ChannelFutureListener提供的通知机制消除了手动检查对应的操作是否完成的必要。<br>每个 Netty 的出站 I/O 操作都将返回一个 ChannelFuture;也就是说，它们都不会阻塞。 </p><h4 id="ChannelPipeline"><a href="#ChannelPipeline" class="headerlink" title="ChannelPipeline"></a>ChannelPipeline</h4><p>ChannelPipeline 提供了 ChannelHandler 链的容器，并定义了用于在该链上传播入站和出站事件流的API。<br>ChannelPipeline 它负责ChannelHandler的管理和事件拦截与调度，当 Channel 被创建时，它会被自动地分配到它专属的 ChannelPipeline。</p><h4 id="ChannelHandler"><a href="#ChannelHandler" class="headerlink" title="ChannelHandler"></a>ChannelHandler</h4><p>ChannelHandler 它充当了所有 处理入站和出站数据的应用程序逻辑的容器。类似于Servlet的Filter过滤器，负责对I/O事件或者I/O操作进行拦截和处理。<br>ChannelHandler 可以用于任何类型的动作，例如将数据从一种格式转换为另外一种格式，或者处理转换过程中所抛出的异常。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本文我们将会介绍什么是Netty，为什么要选择Netty，以及Netty的特性。&lt;/p&gt;
&lt;h3 id=&quot;什么是Netty&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="netty" scheme="http://blog.onlinetool.com.cn/categories/netty/"/>
    
    
      <category term="netty" scheme="http://blog.onlinetool.com.cn/tags/netty/"/>
    
      <category term="并发编程" scheme="http://blog.onlinetool.com.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="异步编程" scheme="http://blog.onlinetool.com.cn/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Netty指南（2）--- Java I/O入门</title>
    <link href="http://blog.onlinetool.com.cn/netty/netty-guide-2-io-basic/"/>
    <id>http://blog.onlinetool.com.cn/netty/netty-guide-2-io-basic/</id>
    <published>2020-03-15T06:23:15.000Z</published>
    <updated>2020-09-25T03:37:14.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文我们将会介绍Java中的几种网络I/O模型，BIO、伪NIO、NIO、AIO，并提供演示代码。</p><h3 id="BIO-—-同步阻塞I-O"><a href="#BIO-—-同步阻塞I-O" class="headerlink" title="BIO — 同步阻塞I/O"></a>BIO — 同步阻塞I/O</h3><p>网络编程的本身是两个进程间的相互通信，其中server端提供位置信息（绑定ip及监听端口），客户端通过连接操作向服务器监听的地址发起连接请求，通过三次握手建立连接，如果连接建立成功，双方就可以通过套接字（socket）进行通信。<br><img src="/netty/netty-guide-2-io-basic/../../images/netty/netty-guide-2-io-basic-bio.png" alt="" title="BIO通信模型-图片来自《Netty权威指南》"><br>如上图所示，采用BIO通信模型的server端，由一个独立的Acceptor线程负责监听客户端连接，当没有客户端连接时服务端阻塞在accept操作上，在接收到客户端连接请求后为每一个客户端创建一个新的线程进行链路处理，处理完毕后通过输出流返回应答消息给客户端，线程销毁，这就是经典的一应一答通信模型。<br>该模型最大的问题是缺乏弹性伸缩能力，当客户端并发量增大时，服务端的线程个数和客户端的并发访问数呈1：1的关系，由于线程是Java虚拟机比较宝贵的系统资源，随着线程数的继续增大，程序会变得愈发的不稳定，最终会出现 栈溢出、创建新线程失败，进而导致宕机或僵死，无法对外提供服务。<br><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master/src/main/java/cn/com/onlinetool/nativeio/bio/" rel="external nofollow noopener noreferrer" target="_blank">点击查看BIO完整示例代码</a> </strong></p><h3 id="伪异步IO-—-BIO的升级版"><a href="#伪异步IO-—-BIO的升级版" class="headerlink" title="伪异步IO — BIO的升级版"></a>伪异步IO — BIO的升级版</h3><p>为了解决BIO中的问题，后端通过在BIO的基础上增加了一个线程池来处理多个客户端的接入，客户端和服务端的关系是 客户端个数M：线程池最大线程数N，由于线程池队列的关系，M可以远大于N，通过线程池可以灵活的调配线程资源，设置最大线程数以防止海量并发连接导致系统资源耗尽。<br><img src="/netty/netty-guide-2-io-basic/../../images/netty/netty-guide-2-io-basic-bio-plus.png" alt="" title="伪异步I/O通信模型-图片来自《Netty权威指南》"><br>如上图所示，当有新的客户端接入时，将客户端的socket封装成task（该任务需实现java.lang.Runnable接口），由线程池中的空闲线程进行处理，由于线程池可以设置队列大小和最大线程数，所以这种I/O模型占用的系统资源是可控的，无论多少个客户端并发请求都不会导致资源耗尽和宕机。<br>不过要说的是 伪异步I/O 只是BIO一个简单的升级版，官方并没有这种叫法，它只是利用线程池解决了资源占用随着客户端连接数无限增长的问题，但是它无法解决BIO导致的线程阻塞问题。<br>比如：服务器处理缓慢，造成长时间阻塞，如果线程池中的可用线程都被阻塞，那后续所有I/O消息都将在队列中排队，由于线程池采用阻塞队列实现，队列积满后续入队列的操作会被阻塞，进而导致新的客户端被拒绝连接，客户端会发生大量连接超时，这就是一个典型的级联故障。<br><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master/src/main/java/cn/com/onlinetool/nativeio/bio/bioPlusServer/" rel="external nofollow noopener noreferrer" target="_blank">点击查看伪异步IO完整示例代码</a> </strong><br>由于伪异步IO，只是BIO的升级版，我称之为BIOPlus~~~，也因此示例代码直接在bio文件夹中创建了bioPlusServer文件夹，并增加了伪异步I/O的server端实现，客户端并没有改动。</p><h3 id="NIO-—-同步非阻塞I-O"><a href="#NIO-—-同步非阻塞I-O" class="headerlink" title="NIO — 同步非阻塞I/O"></a>NIO — 同步非阻塞I/O</h3><p>首先需要澄清一个概念，NIO到底是什么简称？官方叫法是 NewIO，因为相对之前的I/O类库NIO是新增的，它的目标是让Java支持非阻塞I/O，所以也有很多人称NIO为Non-block IO。<br>它是基于I/O多路复用技术的非阻塞I/O，并不是异步的，NIO类库是JDK1.4中引入的，用来弥补原来的同步阻塞I/O的不足（BIO），有部分人称NIO为异步非阻塞IO，这里所说的”异步”是应用层的异步，系统内核的实现还是同步的。<br>JDK1.4阶段NIO的Selector底层基于select/poll模型实现，到了JDK1.5+ Selector的底层实现被优化，底层使用epoll替换了select/poll，但这只是NIO的性能优化，上层API并没有变化，也没有改变I/O模型，还是同步非阻塞I/O。<br>与BIO中Socket类和ServerSocket类相对应，NIO提供了SocketChannel和ServerSocketChannel两种不同的套接字通道实现，这两种新增的通道都支持阻塞和非阻塞两种模式。<br>阻塞模式使用非常简单，但是性能和可靠性不好，一般来说，低负载、低并发的应用程序可以选择阻塞I/O以降低程序复杂度，对于高负载、高并发的应用需要使用NIO的非阻塞模式。<br>NIO中客户端的连接操作和SocketChannel的读写操作都是异步的，如果没有可读写数据会直接返回，可以通过在Selector上注册OP_CONNECT等待后续结果，这样I/O通信线程就可以处理其他的链路，不需要像BIO那样被同步阻塞。<br>因为NIO中的Selector底层实现所使用的的I/O多路复用本质上都属于就是同步I/O，我们需要主动去轮询就绪Channel并根据其状态来进行对应的I/O操作。<br><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master/src/main/java/cn/com/onlinetool/nativeio/nio/" rel="external nofollow noopener noreferrer" target="_blank">点击查看NIO完整示例代码</a> </strong><br><img src="/netty/netty-guide-2-io-basic/../../images/netty/netty-guide-2-io-basic-nio.png" alt="" title="NIO通信时序图-图片来自《Netty权威指南》"><br>NIO类库中多了很多新增的功能和概念，下面我们来介绍一下</p><h4 id="Buffer-—-缓冲区"><a href="#Buffer-—-缓冲区" class="headerlink" title="Buffer — 缓冲区"></a>Buffer — 缓冲区</h4><p>Buffer是NIO中新增的一个对象，它包含一些要写入或者读出的数据，在NIO库中所有的数据都是用Buffer处理的，任何时候访问NIO中的数据都要通过Buffer进行操作，Buffer其本质是一个数组，但功能远比数组强大，它提供了对数据的结构化访问及维护读写位置等信息。<br>最常用的缓冲区是ByteBuffer，用于操作byte[]，Java中除了Boolean类型，其他的基本类型都对应着一种缓冲区，如：ByteBuffer、CharBuffer、ShortBuffer、IntBuffer、LongBuffer、FloatBuffer、DoubleBuffer。<br><img src="/netty/netty-guide-2-io-basic/../../images/netty/netty-guide-2-io-basic-nio-buffer.png" alt="" title="Buffer类关系图"><br>每个Buffer类都是Buffer接口的一个实例，除了ByteBuffer，其他类型的Buffer操作都一样，只是操作的数据类型不同而已，由于绝大多数标准I/O操作都使用ByteBuffer，所以ByteBuffer在具有和其他类型一样的操作之外，还提供了特有的操作，用来方便网络读写。</p><h4 id="Channel-—-通道"><a href="#Channel-—-通道" class="headerlink" title="Channel — 通道"></a>Channel — 通道</h4><p>Channel是一个通道，网络数据通过Channel读取和写入，通道Channel与流Stream之间的区别是通道是双向的，流只能在一个方向移动，要么是输入InputStream要么是输出OutputStream，而通道既可以用来读数据也可以用来写数据，也可以同时进行。<br>Channel是全双工通道，更好的体现了底层操作系统的API，在Unix网络编程模型中，底层操作系统的通道都是全双工的，同时支持读写操作。<br><img src="/netty/netty-guide-2-io-basic/../../images/netty/netty-guide-2-io-basic-nio-channel.png" alt="" title="Channel类关系图"></p><h4 id="Selector-—-多路复用器-选择器"><a href="#Selector-—-多路复用器-选择器" class="headerlink" title="Selector — 多路复用器/选择器"></a>Selector — 多路复用器/选择器</h4><p>Selector是Java NIO编程的基础，熟练的掌握Selector对于NIO编程至关重要，多路复用器提供选择已经就绪的任务的能力，简单来说就是Selector会不断轮训注册在其上的Channel，如果某个Channel上面发生读写事件，<br>这个Channel就处于就绪状态，会被Selector轮询出来，然后通过SelectionKey可以获取就绪Channel的集合，进行后续I/O操作。<br>一个Selector可以同时轮询多个Channel，由于JDK使用了epoll()代替传统的select实现，所以它并没有最大连接句柄的限制，这也就意味着只需要一个线程负责Selector的轮询，就可以接入成千上万的客户端。</p><h3 id="AIO-—-异步非阻塞I-O"><a href="#AIO-—-异步非阻塞I-O" class="headerlink" title="AIO — 异步非阻塞I/O"></a>AIO — 异步非阻塞I/O</h3><p>NIO2.0引入的新的异步通道的感念，对应UNIX网络I/O模型中的异步IO模型，也就是AIO，它提供了异步文件通道和异步套接字通道的实现，CompletionHandler接口的实现类作为操作完成的回调。<br>它不需要像NIO编程那样创建一个独立的I/O线程处理读写事件，也不需要对注册的Channel进行轮询操作即可实现异步读写，从而大大简化了NIO的编程模型。<br>AIO的Socket操作都是由JDK底层线程池负责回调并驱动读写操作，所以使用AIO的异步非阻塞Channel进行编程比NIO变成更为简单。<br><strong> <a href="https://github.com/ch0ice/blog-example-netty/tree/master/src/main/java/cn/com/onlinetool/nativeio/aio/" rel="external nofollow noopener noreferrer" target="_blank">点击查看AIO完整示例代码</a> </strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本文我们将会介绍Java中的几种网络I/O模型，BIO、伪NIO、NIO、AIO，并提供演示代码。&lt;/p&gt;
&lt;h3 id=&quot;BIO-—-同步
      
    
    </summary>
    
      <category term="netty" scheme="http://blog.onlinetool.com.cn/categories/netty/"/>
    
    
      <category term="netty" scheme="http://blog.onlinetool.com.cn/tags/netty/"/>
    
      <category term="并发编程" scheme="http://blog.onlinetool.com.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="异步编程" scheme="http://blog.onlinetool.com.cn/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Netty指南（1）--- I/O模型介绍</title>
    <link href="http://blog.onlinetool.com.cn/netty/netty-guide-1-io-model/"/>
    <id>http://blog.onlinetool.com.cn/netty/netty-guide-1-io-model/</id>
    <published>2020-03-13T05:01:53.000Z</published>
    <updated>2020-09-25T03:37:14.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>本文我们将会介绍JavaI/O进化过程、Linux系统中网络编程I/O的五种模型，以及I/O多路复用技术。</p><h3 id="JavaI-O发展史"><a href="#JavaI-O发展史" class="headerlink" title="JavaI/O发展史"></a>JavaI/O发展史</h3><p>众所周知Netty是由Java开发，那我们先简单的聊聊Java。<br>Java是由Sun Microsystems公司1995年发布的一款高级编程语言，由于其拥有 <strong><em> 一次编写、到处运行 </em></strong> 的特性和丰富且强大的第三方类库支持，自发布以来应用极其广泛，但是Java早期的功能并不完善，其中最令人恼火就是基于同步I/O的Socket通信类库，因为对于操作系统而言，底层是支持异步I/O通信的，只不过很长一段时间Java并没有提供异步I/O通信的类库，JDK1.0 ~ JDK1.3期间Java的IO类库都非常原始，很多Unix网络编程中的接口在Java的I/O类库中都没有体现，例如Pipe、Channel、Buffer、Selector等。</p><h4 id="Java早期I-O-lt-1-4-的一些明显问题（包括但不限于）"><a href="#Java早期I-O-lt-1-4-的一些明显问题（包括但不限于）" class="headerlink" title="Java早期I/O(&lt;1.4)的一些明显问题（包括但不限于）"></a>Java早期I/O(&lt;1.4)的一些明显问题（包括但不限于）</h4><ul><li>没有C/C++中Channel的概念，只有输入和输出流</li><li>同步阻塞式通信I/O，当并发量变大时，经常会导致线程被长时间阻塞且占用资源大</li><li>没有数据缓冲区，I/O性能相对较差<br>直到2002年随着JDK1.4的发布Java才第一次支持非阻塞I/O，这个类库的提供为JDK的通信模型带来了巨大的变化。<h4 id="JDK1-4新增主要的类-接口如下"><a href="#JDK1-4新增主要的类-接口如下" class="headerlink" title="JDK1.4新增主要的类/接口如下"></a>JDK1.4新增主要的类/接口如下</h4></li><li>异步IO操作的缓冲区ByteBuffer</li><li>进行异步IO操作的管道Pipe</li><li>进行IO操作的Channel，包括ServerSocketChannel和SocketChannel</li><li>文件通道FileChannel</li><li>多种字符集编解码能力</li><li>实现非阻塞IO操作的多路复用器Selector</li><li>基于Perl实现的正则表达式类库等……<br>新的NIO类库的提供极大地促进了Java异步非阻塞编程的发展和应用，但仍有不完善的地方。<h4 id="早期NIO类库主要问题如下"><a href="#早期NIO类库主要问题如下" class="headerlink" title="早期NIO类库主要问题如下"></a>早期NIO类库主要问题如下</h4></li><li>没有统一的文件属性，例如读写权限</li><li>API能力比较弱，例如目录的联级创建和递归遍历，往往需要自己实现</li><li>底层存储系统的一些高级API无法使用</li><li>所有文件操作都是同步阻塞调用的，不支持异步文件读写操作<br>2011年，JDK1.7正式发布，最大的亮点是NIO类库的升级，NIO2.0（AIO诞生）。<h4 id="主要提供如下改进"><a href="#主要提供如下改进" class="headerlink" title="主要提供如下改进"></a>主要提供如下改进</h4></li><li>提供能够批量获取文件属性的API，这些API具有平台无惯性，不与特定的文件系统耦合</li><li>提供AIO功能，支持基于文件和网络套接字的异步操作</li></ul><h3 id="Linux网络I-O模型"><a href="#Linux网络I-O模型" class="headerlink" title="Linux网络I/O模型"></a>Linux网络I/O模型</h3><p>Linux内核对外部设备都看作一个文件来操作，一个文件的读写操作会调用内核命令，返回一个文件描述符-fd，对于socket的读写也会有相应的描述符-socketfd，它指向内核中的一个结构体。<br>根据Unix网络编程对I/O模型的分类，共分为5种I/O模型，分别如下：</p><h4 id="同步阻塞I-O模型"><a href="#同步阻塞I-O模型" class="headerlink" title="同步阻塞I/O模型"></a>同步阻塞I/O模型</h4><p>最常用的I/O模型，所有文件操作都是阻塞的，以套接字接口为例，在用户进程空间调用recvfrom(用于套接口上接收数据，并捕获数据发送源的地址)，其系统调用直到数据包到达且数据包被复制到用户进程的缓冲区或发生错误时才返回，在此期间会一直处于阻塞状态，因此被称为阻塞I/O模型。<br><img src="/netty/netty-guide-1-io-model/../../images/netty/netty-guide-1-io-model-sync-block.png" alt="" title="同步阻塞I/O模型-图片来自《Netty权威指南》"></p><h4 id="同步非阻塞I-O模型"><a href="#同步非阻塞I-O模型" class="headerlink" title="同步非阻塞I/O模型"></a>同步非阻塞I/O模型</h4><p>继续以上面的套接字接口为例，在用户进程空间中调用recvfrom，从应用层到内核的时候，有数据直接返回，没数据会返回一个EWOULDBLOCK错误，一般都会对非阻塞I/O进行状态轮训，看内核中有没有数据过来。<br><img src="/netty/netty-guide-1-io-model/../../images/netty/netty-guide-1-io-model-sync-not-block.png" alt="" title="同步非阻塞I/O模型-图片来自《Netty权威指南》"></p><h4 id="I-O复用模型"><a href="#I-O复用模型" class="headerlink" title="I/O复用模型"></a>I/O复用模型</h4><p>Linux提供了select、poll，进程通过一个或多个文件描述符-fd传递给select或poll系统调用，阻塞在select操作上，这样select/poll可以帮我们侦测多个fd是否处于就绪。<br>select和poll的实现方式类似，不同之处在于select有fd的限制，poll采用pollfd链式结构代替select中fd_set使其没有fd数量的限制，但是其内部实现都是顺序扫描所有fd的状态，并且每次调用select/poll都需要把fd集合从用户空间copy到内核空间，因此当连接数变大处理速度会呈线性下降，因此它的使用受限。<br>Linux还提供了一个epoll系统调用，epoll为每个fd指定了一个回调函数，当数据准备好后，就绪的fd会主动加入到一个就绪队列中，唤醒就绪fd的等待者，调用回调函数。<br>epoll使用基于事件驱动方式代替select/poll中的顺序扫描，因此性能提高很多。<br><img src="/netty/netty-guide-1-io-model/../../images/netty/netty-guide-1-io-model-reuse.png" alt="" title="I/O复用模型-图片来自《Netty权威指南》"></p><h4 id="信号驱动I-O模型"><a href="#信号驱动I-O模型" class="headerlink" title="信号驱动I/O模型"></a>信号驱动I/O模型</h4><p>信号驱动IO模型的特点是无需等待数据，在数据等待阶段是非阻塞的，内核当数据准备就绪时会为该进程生成一个SIGIO信号，应用程序只需要绑定SIGIO信号的处理函数就可以了，通过SIGIO信号回调通知应用程序来读取数据，并通知”属主”进程执行SIGIO信号处理函数处理数据。<br>信号驱动I/O模型因为其无需等待数据就绪的特性，比select和poll的性能高，但是缺点是致命的，Linux中信号队列的大小是有限制的，一旦队列溢出，进程将终止导致无法读取数据。<br><img src="/netty/netty-guide-1-io-model/../../images/netty/netty-guide-1-io-model-signal-drive.png" alt="" title="信号驱动I/O模型-图片来自《Netty权威指南》"></p><h4 id="异步I-O模型"><a href="#异步I-O模型" class="headerlink" title="异步I/O模型"></a>异步I/O模型</h4><p>告知内核启动某个操作，并让内核在整个操作后（包括将数据从内核复制到用户缓冲区）通知我们。<br>这种模型与信号驱动模型主要区别是 <strong><em> 信号驱动IO由内核通知我们何时开始一个I/O操作，异步I/O模型由内核通知我们IO操作何时已经操作完成。 </em></strong><br><img src="/netty/netty-guide-1-io-model/../../images/netty/netty-guide-1-io-model-async.png" alt="" title="异步I/O模型-图片来自《Netty权威指南》"></p><h3 id="IO多路复用技术"><a href="#IO多路复用技术" class="headerlink" title="IO多路复用技术"></a>IO多路复用技术</h3><p>在IO编程过程中，当需要同时处理多个客户端接入请求时可以利用多线程或I/O多路复用技术进行处理。<br>I/O多路复用技术通过把多个IO的阻塞复用到同一个select的阻塞上，从而使得系统在单线程的情况下可以同时处理多个客户端请求。<br>与传统多线程/多进程相比，IO多路复用的优势在于系统开销小，系统不需要创建新的额外进程/线程，也不需要维护这些进程/线程的运行，降低了系统维护的工作量同时也节省了系统资源。<br>目前支持的I/O多路复用系统调用有select、pselect、poll、epoll，在Linux网络编程过程中，很长一段时间都使用select做轮训和网络事件通知，由于select的固有缺陷，导致它的应用受到了很大的限制，最终Linux在新的内核版本中选择了epoll。</p><h4 id="epoll与select相比"><a href="#epoll与select相比" class="headerlink" title="epoll与select相比"></a>epoll与select相比</h4><ul><li>支持一个进程打开的socket描述符-fd不受限制(仅受限于操作系统的最大文件句柄数)<blockquote><p>select最大的缺陷是单个进程所能打开的fd有限制，它由FD_SETSIZE设置，缺省值是1024，对于那些需要支持成千上万个TCP连接的服务器显然太少了，可以选择修改这个宏重新编译内核，不过会带来网络效率下降的问题。也可以使用传统的多进程方案解决这个问题，虽然在Linux中创建进程的代价比较小，但随着连接数的增加资源占用还是会线性增长，所以这种方式并不能解决根本问题。<br>epoll并没有这个限制，它所支持的fd上限是系统可创建的最大文件句柄数，要远远大于select中的FD_SETSIZE，比如一台1GB的机器上可以创建10W个句柄左右，具体的只可以通过Linux系统命令 cat /proc/sys/fs/file-max 查看系统最大文件句柄数，通常这个值与系统的内存关系比较大，可人为根据实际机器配置情况修改这个值。</p></blockquote></li><li>IO效率不会随着fd的数量增加而线性下降<blockquote><p>传统select/poll的一个致命缺点是当拥有一个很大的socket集合时，由于网络延时或链路空闲，任一时刻只有少部分的socket是活跃的，但是select/poll每次调用都会线性扫描全部的集合，导致效率成线性下降。<br>epoll中不存在这个问题，它只会对活跃的socket进行操作，这是因为在内核实现中epoll是根据每个fd的callback函数实现的，只有活跃的socket才会主动调用callback函数，其他idle状态的socket则不会，这也是为什么有人称epoll为”异步IO”。<br>针对epoll和select性能对比的benchmark测试表明：如果所有的socket都处于活跃状态，在这种情况下epoll的效率并不比select/poll高，反而有些许下降，但是正常的网络环境参差不齐，socket基本不会全部处于活跃状态，在这种情况下epoll的性能远高于select/poll。</p></blockquote></li><li>使用mmap加速内核与用户控件的消息传递<blockquote><p>无论是select、poll还是epoll都需要内核把fd消息通知给用户空间，如何避免不必要的内存复制是非常重要的。<br>epoll是通过内核和用户控件mmap同一块内存来实现的，避免了不必要的内存复制。</p></blockquote></li><li>补充说明<blockquote><p>克服select/poll缺点的方法不只有epoll，epoll只是Linux的实现方案，在freeBSD（另外一种操作系统）中的kqueue同样可以克服select/poll的缺点，但是使用难度较高，而且我们的应用程序目前绝大多数都是部署在Linux中的。</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;本文我们将会介绍JavaI/O进化过程、Linux系统中网络编程I/O的五种模型，以及I/O多路复用技术。&lt;/p&gt;
&lt;h3 id=&quot;Java
      
    
    </summary>
    
      <category term="netty" scheme="http://blog.onlinetool.com.cn/categories/netty/"/>
    
    
      <category term="netty" scheme="http://blog.onlinetool.com.cn/tags/netty/"/>
    
      <category term="并发编程" scheme="http://blog.onlinetool.com.cn/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="异步编程" scheme="http://blog.onlinetool.com.cn/tags/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>java代码混淆之Allatori</title>
    <link href="http://blog.onlinetool.com.cn/developTool/allatori/"/>
    <id>http://blog.onlinetool.com.cn/developTool/allatori/</id>
    <published>2018-11-14T09:08:00.000Z</published>
    <updated>2020-09-25T03:37:14.686Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Allatori是一个Java 混淆器,它属于第二代的混淆器，因此它能够全方位的保护你的知识产权。<br>Allatori完全使用java编写，所以可以运行java代码的环境，都可以使用Allatori。<br>Allatori具有以下几种保护方式：命名混淆，流混淆，调试信息混淆，字符串混淆，以及水印技术。<br>对于教育和非商业项目来说这个混淆器是免费的。新版本支持war和ear文件格式，并且允许对需要混淆代码的应用程序添加有效日期。<br><a href="http://www.allatori.com/doc.html" rel="external nofollow noopener noreferrer" target="_blank">点此查看官方文档</a></p><h3 id="为什么要混淆代码？"><a href="#为什么要混淆代码？" class="headerlink" title="为什么要混淆代码？"></a>为什么要混淆代码？</h3><p>Java是一种跨平台的、解释型语言，Java源代码编译成中间“字节码”存储于class文件中。<br>由于跨平台的需要，Java字节码中包括了很多源代码信息，如变量名、方法名，并且通过这些名称来访问变量和方法，这些符号带有许多语义信息，很容易被反编译成Java源代码。<br>为了防止这种现象，我们可以使用Java混淆器对Java字节码进行混淆。</p><h3 id="什么是名称混淆？"><a href="#什么是名称混淆？" class="headerlink" title="什么是名称混淆？"></a>什么是名称混淆？</h3><p>Allatori的名称混淆机制将有意义的类，字段、方法名称更改为无意义的字符串。<br>虽然Allatori是第二代Java混淆器，但它也可以执行出色的名称混淆。<br>与其他一些混淆器不同，它被设计为处理任何类型的依赖和继承方案。<br>Allatori生成的新名称非常短，因此它减少了字节代码的大小。<br>在名称混淆的字节代码中，包，类，字段和方法名称已重命名，并且永远不能恢复原始名称。<br>不幸的是，控制流程仍然清晰可见。<br>这就是为什么我们还需要使用Allatori的Flow Obfuscation（流混淆）。 </p><h3 id="什么是流混淆？"><a href="#什么是流混淆？" class="headerlink" title="什么是流混淆？"></a>什么是流混淆？</h3><p>Allatori作为第二代Java混淆器，除了名称混淆之外，还执行流混淆。<br>比如使用了 ‘if’，’switch’，’while’或’for’ 等关键字的方法，会被进行执行流混淆。<br>它对字节码做了细微的修改，模糊了控制流，而不改变代码在运行时的行为。<br>通常情况下，选择和循环等逻辑构造会被更改，因此它们不再具有直接等效的Java源代码。<br>流模糊的字节码通常强制反编译器将一系列标签和非法的“goto”语句插入到它们生成的源代码中。<br>源代码有时会因为反编译错误而变得更加模糊。</p><h3 id="什么是调试信息混淆？"><a href="#什么是调试信息混淆？" class="headerlink" title="什么是调试信息混淆？"></a>什么是调试信息混淆？</h3><p>Allatori使用所有“传统”混淆技术。它会混淆调试信息并重命名所有可能的方法和字段名称。<br>我理解的是Allatori混淆了执行流和类、方法的名称后就达到了调试信息混淆，因为混淆后的代码无法与源代码相对应。</p><h3 id="什么是字符串混淆？"><a href="#什么是字符串混淆？" class="headerlink" title="什么是字符串混淆？"></a>什么是字符串混淆？</h3><p>当竞争对手或黑客反编译混淆的应用程序时，他们会寻找任何他们感兴趣的信息。<br>比如嵌入在应用程序中的字符串文字提供了重要的线索。<br>这些文字可能是：<br>1.调试程序需要的输出。<br>2.错误消息的文本。<br>3.异常消息的文本。<br>在代码中对字符串的简单搜索将会显示其使用位置的确切位置，这意味着它将本地化​​必要的代码片段，从而使黑客更容易理解算法你的程序。<br>字符串文字可以成为探索整个应用程序的起点。<br>Allatori的字符串加密技术对存储在类文件的常量池中的字符串字面值进行加密。<br>在这种情况下，应用程序反编译后的字符串搜索不会给黑客带来任何好处。<br>Allatori将代码片段添加到类中，以便您的字符串在运行时被解密，这意味着表面上一切都将如常。</p><h3 id="什么是软件水印？"><a href="#什么是软件水印？" class="headerlink" title="什么是软件水印？"></a>什么是软件水印？</h3><p>软件水印可以用于将客户标识或版权信息隐藏到软件应用程序中，类似于使用隐写技术将其隐藏在诸如歌曲，电影和图像之类的其他数字内容中。<br>水印可用于识别软件的所有者或跟踪盗版副本的来源。 </p><h3 id="混淆器的优势"><a href="#混淆器的优势" class="headerlink" title="混淆器的优势"></a>混淆器的优势</h3><p>混淆就是对发布出去的程序进行重新组织和处理，使得处理后的代码与处理前代码完成相同的功能，而混淆后的代码很难被反编译，即使反编译成功也很难得出程序的真正语义。<br>被混淆过的程序代码，仍然遵照原来的档案格式和指令集，执行结果也与混淆前一样，只是混淆器将代码中的所有变量、函数、类的名称变为简短的英文字母代号，在缺乏相应的函数名和程序注释的况下，即使被反编译，也将难以阅读。<br>同时混淆是不可逆的，在混淆的过程中一些不影响正常运行的信息将永久丢失，这些信息的丢失使程序变得更加难以理解。<br>混淆器的作用不仅仅是保护代码，它也有精简编译后程序大小的作用。<br>由于以上介绍的缩短变量和函数名以及丢失部分信息的原因， 编译后jar文件体积大约能减少25% ，这对当前费用较贵的无线网络传输是有一定意义的。</p><h3 id="Allatori的使用"><a href="#Allatori的使用" class="headerlink" title="Allatori的使用"></a>Allatori的使用</h3><h4 id="下载支持包"><a href="#下载支持包" class="headerlink" title="下载支持包"></a>下载支持包</h4><p>Allatori不需要安装，你需要在<a href="http://www.allatori.com" rel="external nofollow noopener noreferrer" target="_blank">官网</a>下载它的支持包。<br><img src="/developTool/allatori/../../images/allatori-download.png" alt="" title="点击官网的 DEMO DOWNLOAD"><br>下载后的包解压后它长这个样子。<br><img src="/developTool/allatori/../../images/allatori-demo-dir.png" alt="" title="解压后的allatori-demo"><br>它包含allatori的支持包，它在lib目录下，还有allatori的使用教程。<br>我们需要的是lib中的两个jar包，将它放到我们的工程目录中，这里使用maven 构建，你可以选择把它放到项目的根目录中。<br><img src="/developTool/allatori/../../images/allatori-project.png" alt="" title="项目结构"></p><h4 id="编写allatori配置文件"><a href="#编写allatori配置文件" class="headerlink" title="编写allatori配置文件"></a>编写allatori配置文件</h4><p>在项目中新建一个allatori.xml文件，位置和名称不是固定的，看你心情。<br>以下是配置文件的内容。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">in</span>=<span class="string">"allatori-1.0-SNAPSHOT.jar"</span> <span class="attr">out</span>=<span class="string">"new-allatori-1.0-SNAPSHOT.jar"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">classpath</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jar</span> <span class="attr">name</span>=<span class="string">"/Users/choice/.m2/repository/**/*.jar"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">classpath</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">expiry</span> <span class="attr">date</span>=<span class="string">"2000/01/01"</span> <span class="attr">string</span>=<span class="string">"EXPIRED!"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">keep-names</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">template</span>=<span class="string">"class * instanceof java.io.Serializable"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">template</span>=<span class="string">"class * instanceof java.io.Serializable"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">template</span>=<span class="string">"static final long serialVersionUID"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">method</span> <span class="attr">template</span>=<span class="string">"void writeObject(java.io.ObjectOutputStream)"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">method</span> <span class="attr">template</span>=<span class="string">"void readObject(java.io.ObjectInputStream)"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">method</span> <span class="attr">template</span>=<span class="string">"java.lang.Object writeReplace()"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">method</span> <span class="attr">template</span>=<span class="string">"java.lang.Object readResolve()"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">access</span>=<span class="string">"protected+"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">field</span> <span class="attr">access</span>=<span class="string">"protected+"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">method</span> <span class="attr">access</span>=<span class="string">"protected+"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">keep-names</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"log-file"</span> <span class="attr">value</span>=<span class="string">"log.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ignore-classes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">class</span> <span class="attr">template</span>=<span class="string">"class *springframework*"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ignore-classes</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">config</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>配置文件中的内容下面会一一讲解。</p><h4 id="添加Allatori的maven配置"><a href="#添加Allatori的maven配置" class="headerlink" title="添加Allatori的maven配置"></a>添加Allatori的maven配置</h4><p>将以下内容添加到 pom.xml 中。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置你项目的编译方式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Allatori config 将Allatori配置文件复制到“目标”目录。目标文件将被过滤(配置文件中使用的Maven属性将被解析)。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-and-filter-allatori-config<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;basedir&#125;/target<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;basedir&#125;/allatori<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>allatori.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Running Allatori --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>exec-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">id</span>&gt;</span>run-allatori<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>exec<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executable</span>&gt;</span>java<span class="tag">&lt;/<span class="name">executable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">arguments</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">argument</span>&gt;</span>-Xms128m<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">argument</span>&gt;</span>-Xmx512m<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">argument</span>&gt;</span>-jar<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">argument</span>&gt;</span>$&#123;basedir&#125;/../lib/allatori.jar<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">argument</span>&gt;</span>$&#123;basedir&#125;/target/allatori.xml<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Allatori plugin end --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="常用的Allatori标签"><a href="#常用的Allatori标签" class="headerlink" title="常用的Allatori标签"></a>常用的Allatori标签</h3><p>以下是常用的配置标签，如想看完整的标签，请查看<a href="http://www.allatori.com/doc.html" rel="external nofollow noopener noreferrer" target="_blank">官网文档</a></p><h4 id="config-–-gt-input-tag"><a href="#config-–-gt-input-tag" class="headerlink" title="config –&gt; input tag"></a>config –&gt; input tag</h4><pre><code>input 标签是用来设置混淆源（JAR，WAR，EAR）文件。它应该包含至少一个嵌套的jar或dir标记来设置输入和输出文件。input 标签有两个可选属性：    basedir         可选属性。将根据指定的目录解析jar文件的相对路径。默认情况下，将根据配置文件位置解析相对路径。    single-jar      可选属性。Allatori将创建一个包含所有混淆类的附加输出jar文件。</code></pre><h4 id="config-–-gt-input-–-gt-jar-tag"><a href="#config-–-gt-input-–-gt-jar-tag" class="headerlink" title="config –&gt; input –&gt; jar tag"></a>config –&gt; input –&gt; jar tag</h4><pre><code>jar标签有两个必需的属性：    in          要混淆的jar文件的名称。    out         输出jar文件的名称。它可以与in相同，在这种情况下，jar将被其混淆版本覆盖。</code></pre><h4 id="config-–-gt-classpath-tag"><a href="#config-–-gt-classpath-tag" class="headerlink" title="config –&gt; classpath tag"></a>config –&gt; classpath tag</h4><pre><code>classpath 标签是用来设置的类路径混淆应用。它包含带有jar文件名称的嵌套jar标签。没有必要引用应用程序所需的所有库jar，但缺少类路径元素可能会导致模糊处理较弱。Allatori会在混淆过程中警告你所有缺失的class。classpath 标签有一个可选属性：    basedir         将根据指定的目录解析jar文件的相对路径。默认情况下，将根据配置文件位置解析相对路径。</code></pre><h4 id="config-–-gt-classpath-–-gt-jar-tag"><a href="#config-–-gt-classpath-–-gt-jar-tag" class="headerlink" title="config –&gt; classpath –&gt; jar tag"></a>config –&gt; classpath –&gt; jar tag</h4><pre><code>classpath 中的 jar标签有一个必需属性：    name    要添加到类路径的jar文件的名称。            允许使用通配符语法：“*”匹配文件名中的任何字符; “**”递归到子目录。</code></pre><h4 id="config-–-gt-expiry-tag"><a href="#config-–-gt-expiry-tag" class="headerlink" title="config –&gt; expiry tag"></a>config –&gt; expiry tag</h4><pre><code>expiry 标记用于到期日设置为你的应用程序。有效期限检查被插入到许多方法中，而不仅仅是主要方法，因此不能轻易删除。此功能可用于混淆甚至没有主方法的库。expiry 标签有两个必需的属性：    date            必需的。有效期为yyyy/mm/dd格式。    string            必需的。如果应用程序在指定的过期日期之后运行，则抛出异常的任何字符串消息。</code></pre><h4 id="config-–-gt-keep-names-tag"><a href="#config-–-gt-keep-names-tag" class="headerlink" title="config –&gt; keep-names tag"></a>config –&gt; keep-names tag</h4><pre><code>keep-names 标签用于设置不应该在混淆过程被重新命名类，方法和字段名。如果混淆的应用程序是库，那么您应该保留所有公共API。对于独立应用程序，您应至少保留主类的名称。您还应该保留通过反射使用的类和方法的名称。keep-name 有下列嵌套的标签：    field           用于指定不重命名的范围。    method          用于指定不应重命名的方法;    class           用于指定不应重命名的类。反过来，可以包含嵌套的字段和方法标记。</code></pre><h4 id="config-–-gt-keep-names-–-gt-class-tag"><a href="#config-–-gt-keep-names-–-gt-class-tag" class="headerlink" title="config –&gt; keep-names –&gt; class tag"></a>config –&gt; keep-names –&gt; class tag</h4><pre><code>class 标签用于匹配的类。class 它具有以下属性：access        设置匹配规则，如下：    private         匹配具有 private 访问权限的类，字段或方法。    private+        匹配具有 private 或更高访问权限的类，字段或方法。    package         使用包访问匹配类，字段或方法。    package+        匹配包及子包的类，字段或方法。    protected       匹配具有 protected 访问权限的类，字段或方法。    protected+      匹配具有 protected 或更改访问权限的类，字段或方法。    public          匹配具有 public 访问权限的类，字段或方法。template    设置匹配规则。如下：    class *         匹配所有类和接口。    interface *     匹配所有接口。    public class *        匹配所有public的类和接口。    protected+ class *  匹配所有protected的类和接口。    class *abc*     匹配以完全限定名包含“abc”的所有类。    class com.abc.*     匹配com.abc包及其子包中的所有类。    class *.abc.*       匹配所有“abc”包及其子包中的所有类。    class * extends java.util.Enumeration    匹配所有继承java.util.Enumeration的所有类。    class * extends *.Enumeration            匹配所有继承*.Enumeration的类。    class * instanceof java.io.Serializable    匹配作为java.io.Serializable实例的所有类。    class * implements *.MouseListener        匹配实现MouseListener的所有类。    @java.lang.Deprecated class *            匹配所有已弃用的类。ignore        如果设置为“true”或“yes”，则将重命名匹配的类，但将像往常一样处理嵌套的方法和字段标记。                它允许保留某些字段和方法的名称，而不保留类的名称。stop        如果设置为“true”或“yes”，则Allatori将停止对匹配的类应用任何进一步的规则。</code></pre><h4 id="config-–-gt-keep-names-–-gt-class-–-gt-field-tag"><a href="#config-–-gt-keep-names-–-gt-class-–-gt-field-tag" class="headerlink" title="config –&gt; keep-names –&gt; class –&gt; field tag"></a>config –&gt; keep-names –&gt; class –&gt; field tag</h4><pre><code>field 该标签用于匹配字段。field 标签具有以下属性：    access属性设置匹配规则，如下：        private                                    匹配具有 private 访问权限的类，字段或方法。        private+                                匹配具有 private 或更高访问权限的类，字段或方法。        package                                    使用包访问匹配类，字段或方法。        package+                                匹配包及子包的类，字段或方法。        protected                                匹配具有 protected 访问权限的类，字段或方法。        protected+                                匹配具有 protected 或更高访问权限的类，字段或方法。        public                                    匹配具有 public 访问权限的类，字段或方法。    template属性具有以下格式：        *                                        匹配所有字段。        private *                                匹配所有私有字段。        private+ *                                匹配所有字段。        protected+ *                            匹配所有受保护和公共字段。        static *                                匹配所有静态字段。        public static *                            匹配所有公共静态字段。        public int *                            匹配所有公共整数字段。        java.lang.String *                        匹配所有String字段。        java.lang.* *                            匹配java.lang包中所有类型的字段。        abc*                                    匹配名称以“abc”开头的所有字段。        private abc*                            匹配名称以“abc”开头的所有私有字段。        * instanceof java.io.Serializable        匹配所有可序列化的字段。        @java.lang.Deprecated *                    匹配所有已弃用的字段。</code></pre><h4 id="config-–-gt-keep-names-–-gt-class-–-gt-method-tag"><a href="#config-–-gt-keep-names-–-gt-class-–-gt-method-tag" class="headerlink" title="config –&gt; keep-names –&gt; class –&gt; method tag"></a>config –&gt; keep-names –&gt; class –&gt; method tag</h4><pre><code>method 标签用于匹配的方法。如果 method 标签嵌套在 class 标签中，则它仅应用于父类标记匹配的类。如果父标记是 keep-names，则它将应用于所有类。method 标签具有以下属性：    access                                            设置匹配规则，规则同行 access 属性    method标签的template属性具有以下格式：    [@annotation] [modifiers] [type] methodname（arguments）    template    *(**)                                        匹配所有方法。    private *(**)                                匹配所有私有方法。    private+ *(**)                                匹配所有方法。    protected+ *(**)                            匹配所有受保护和公共方法。    private+ *(*)                                只用一个参数匹配所有方法。    private+ *(*,*)                                使用两个参数匹配所有方法。    private+ *(java.lang.String)                使用String类型的一个参数匹配所有方法。    private+ *(java.lang.String,**)                使用String匹配所有方法作为第一个参数。    private+ *(java.lang.*)                        匹配所有方法只有一个参数，类型在java.lang包中。    public get*(**)                                匹配名称以“get”开头的所有公共方法。    public *abc*(**)                            匹配名称包含“abc”的所有公共方法。    private+ int *(**)                            匹配int返回类型的所有方法。    @java.lang.Deprecated *(**)                    匹配所有已弃用的方法。    parameters                                    如果设置为“keep”，则不会更改方法参数的名称。对公共API方法很有用。  </code></pre><h4 id="config-–-gt-ignore-classes-tag"><a href="#config-–-gt-ignore-classes-tag" class="headerlink" title="config –&gt; ignore-classes tag"></a>config –&gt; ignore-classes tag</h4><pre><code>ignore-classes标签用于从混淆过程中完全排除一些类。这些类是“原样”复制的，对输出jar文件没有任何更改。注意，被忽略的类将引用其他类的原始名称,不能重命名被忽略类引用的类/方法。</code></pre><h4 id="config-–-gt-ignore-classes-–-gt-class-tag"><a href="#config-–-gt-ignore-classes-–-gt-class-tag" class="headerlink" title="config –&gt; ignore-classes –&gt; class tag"></a>config –&gt; ignore-classes –&gt; class tag</h4><pre><code>与 config --&gt; ignore-classes --&gt; class tag 中的规则相同。</code></pre><h4 id="config-–-gt-property-tag"><a href="#config-–-gt-property-tag" class="headerlink" title="config –&gt; property tag"></a>config –&gt; property tag</h4><pre><code>property 标签用于设置不同的混淆属性。property 标签有两个必需的属性 name 和 value：    普通属性    log-file                    filename                        Allatori将把混淆日志写入指定的文件。如果没有设置属性，则不会创建日志文件。                                        相对路径根据配置文件位置进行解析。    随机种子    random-seed                 any string                      用于初始化随机数生成器的字符串。    字符串加密属性    string-encryption        enable                          (默认情况下)所有可以安全更改加密值的字符串字面值都将被加密。                                        Allatori将在运行时添加一个方法来解密字符串。        disable                         字符串加密被禁用。        maximum                         所有字符串文字将被加密。请参阅下面的限制。        maximum-with-warnings           所有字符串文字都将被加密。                                        使用==运算符的每个字符串比较都会产生警告，您将能够用equals（）调用替换这些比较。    string-encryption-type          fast                            (默认)Allatori将使用非常快的字符串加密算法。        strong                          Allatori将使用强大和棘手的字符串加密算法,不过，速度要慢一些。    控制流混淆属性    control-flow-obfuscation        enable                          Allatori将修改方法的代码。它不会在运行时改变应用程序的行为，但会使反编译过程更加困难。                                        通常，控制流混淆也使应用程序更小、更快。        disable                         控制流混淆被禁用。    extensive-flow-obfuscation        normal                          (默认情况下)Allatori将使用控制流混淆技术，这将使混乱的应用程序变得更大、更慢。                                        然而，Allatori将最小化此类代码转换的数量。        disable                         禁用广泛的控制流混淆。        maximum                         Allatori将完全使用控制流混淆技术，这使得混淆应用程序变得更大、更慢。</code></pre><h3 id="混淆前后效果"><a href="#混淆前后效果" class="headerlink" title="混淆前后效果"></a>混淆前后效果</h3><p>混淆前<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">App</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">        Integer aaaaaaa = <span class="number">127</span>;</span><br><span class="line">        Integer aaaaaaa1 = <span class="number">127</span>;</span><br><span class="line">        System.out.println(aaaaaaa == aaaaaaa1);</span><br><span class="line">        Integer bbbbbbb = <span class="number">128</span>;</span><br><span class="line">        Integer bbbbbbb1 = <span class="number">128</span>;</span><br><span class="line">        System.out.println(bbbbbbb == bbbbbbb1);</span><br><span class="line">        <span class="keyword">int</span> score = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (score &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"及格"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (score &lt; <span class="number">85</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"良好"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">85</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">"优秀"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>混淆后<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">App</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">ALLATORIxDEMO</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> var10000 = <span class="number">5</span> &lt;&lt; <span class="number">4</span> ^ <span class="number">3</span> &lt;&lt; <span class="number">2</span> ^ <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> var10001 = (<span class="number">2</span> ^ <span class="number">5</span>) &lt;&lt; <span class="number">4</span> ^ <span class="number">2</span> &lt;&lt; <span class="number">2</span> ^ <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">int</span> var10002 = <span class="number">4</span> &lt;&lt; <span class="number">4</span> ^ <span class="number">4</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> var10003 = s.length();</span><br><span class="line">        <span class="keyword">char</span>[] var10004 = <span class="keyword">new</span> <span class="keyword">char</span>[var10003];</span><br><span class="line">        <span class="keyword">boolean</span> var10006 = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">int</span> var5 = var10003 - <span class="number">1</span>;</span><br><span class="line">        var10003 = var10002;</span><br><span class="line">        <span class="keyword">int</span> var3;</span><br><span class="line">        var10002 = var3 = var5;</span><br><span class="line">        <span class="keyword">char</span>[] var1 = var10004;</span><br><span class="line">        <span class="keyword">int</span> var4 = var10003;</span><br><span class="line">        var10000 = var10002;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> var2 = var10001; var10000 &gt;= <span class="number">0</span>; var10000 = var3) &#123;</span><br><span class="line">            var10001 = var3;</span><br><span class="line">            <span class="keyword">char</span> var6 = s.charAt(var3);</span><br><span class="line">            --var3;</span><br><span class="line">            var1[var10001] = (<span class="keyword">char</span>)(var6 ^ var2);</span><br><span class="line">            <span class="keyword">if</span> (var3 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            var10002 = var3--;</span><br><span class="line">            var1[var10002] = (<span class="keyword">char</span>)(s.charAt(var10002) ^ var4);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(var1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] var0)</span> </span>&#123;</span><br><span class="line">        System.out.println(ALLATORIxDEMO(<span class="string">"qkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXBXh[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[kqk[h[h[h[hXk[k[h[k[h[hXk[kXk[kXk[kXh[kXk[h[h[h[hXBXh[h[h[hXhXhXh[hXh[hXhXh[k[hXhXhXhXh[k[h[h[h[h[kqk[h[h[h[kXk[k[h[k[h[kXk[hXh[k[k[kXh[hXh[h[h[h[hXBXh[h[h[hXhXhXkXhXkXhXhXh[k[hXkXhXhXhXkXh[h[h[h[kqk[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[hXBXh4*\u001d=\b+\u001a&lt;\u0012'\u0015h\u00191[\t\u0017$\u001a&lt;\u0014:\u0012h4*\u001d=\b+\u001a&lt;\u0014:[&gt;MfMh?\r6\u0007[kqk[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[hXBXh[h[h[h[h[h\u0013&lt;\u000f8AgT?\f?U)\u0017$\u001a&lt;\u0014:\u0012f\u0018'\u0016h[h[h[h[h[h[kqk[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[h[hXBXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkXkq"</span>));</span><br><span class="line">        System.out.println(ALLATORIxDEMO(<span class="string">"\u0000\u001e$\u0017'[\u001f\u0014:\u0017,Z"</span>));</span><br><span class="line">        Integer a = <span class="number">127</span>;</span><br><span class="line">        Integer a = <span class="number">127</span>;</span><br><span class="line">        System.out.println(a == a);</span><br><span class="line">        Integer a = <span class="number">128</span>;</span><br><span class="line">        Integer a = <span class="number">128</span>;</span><br><span class="line">        System.out.println(a == a);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="number">10</span> &gt;= <span class="number">60</span>) &#123;</span><br><span class="line">            System.out.println(ALLATORIxDEMO(<span class="string">"厂桇"</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (a &gt;= <span class="number">80</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (a &lt; <span class="number">85</span>) &#123;</span><br><span class="line">                    System.out.println(ALLATORIxDEMO(<span class="string">"舧夆"</span>));</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (a &gt;= <span class="number">85</span>) &#123;</span><br><span class="line">                    System.out.println(ALLATORIxDEMO(<span class="string">"佐离"</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;Allatori是一个Java 混淆器,它属于第二代的混淆器，因此它能够全方位的保护你的知识产权。&lt;br&gt;Allatori完全使用java编
      
    
    </summary>
    
      <category term="开发工具" scheme="http://blog.onlinetool.com.cn/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="java代码混淆" scheme="http://blog.onlinetool.com.cn/tags/java%E4%BB%A3%E7%A0%81%E6%B7%B7%E6%B7%86/"/>
    
      <category term="allatori" scheme="http://blog.onlinetool.com.cn/tags/allatori/"/>
    
  </entry>
  
  <entry>
    <title>iTerm2 + ohMyZsh 打造Mac完美终端</title>
    <link href="http://blog.onlinetool.com.cn/developTool/iterm2-ohmyshell/"/>
    <id>http://blog.onlinetool.com.cn/developTool/iterm2-ohmyshell/</id>
    <published>2018-08-11T05:15:53.000Z</published>
    <updated>2020-09-25T03:37:14.686Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>作为码农，大家对Terminal都很熟悉，如果你使用的是Mac，那么MacOS自带的Terminal可能会让你失望。<br>下面我们一步一步的搭建一个 功能强大、智能、美观 的Terminal。</p><h3 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h3><p>iTerm2是Terminal的替代品，是一款比较小众的软件，功能完爆MacOS的Terminal。<br>iTerm2可以设置主题，支持屏幕切割、各种快捷键。</p><h4 id="iTerm2安装"><a href="#iTerm2安装" class="headerlink" title="iTerm2安装"></a>iTerm2安装</h4><h5 id="使用Bower安装"><a href="#使用Bower安装" class="headerlink" title="使用Bower安装"></a>使用Bower安装</h5><p>如果已经安装了Bower跳过第一条命令。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install bower -g</span><br><span class="line">brew cask install iterm2</span><br></pre></td></tr></table></figure></p><h5 id="官网下载安装"><a href="#官网下载安装" class="headerlink" title="官网下载安装"></a>官网下载安装</h5><p><a href="http://www.iterm2.cn/" rel="external nofollow noopener noreferrer" target="_blank">点击进入iTerm2官网</a>，下载后直接安装即可。</p><h4 id="iTerm2常用配置"><a href="#iTerm2常用配置" class="headerlink" title="iTerm2常用配置"></a>iTerm2常用配置</h4><h5 id="设置iTerm2为默认Terminal"><a href="#设置iTerm2为默认Terminal" class="headerlink" title="设置iTerm2为默认Terminal"></a>设置iTerm2为默认Terminal</h5><p><img src="/developTool/iterm2-ohmyshell/../../images/iterm2-default.png" alt="" title="设置iTerm2为默认Terminal"></p><h5 id="设置iTerm2打开快捷键"><a href="#设置iTerm2打开快捷键" class="headerlink" title="设置iTerm2打开快捷键"></a>设置iTerm2打开快捷键</h5><p><img src="/developTool/iterm2-ohmyshell/../../images/iterm2-shortcuts-open.png" alt="" title="设置iTerm2打开快捷键"></p><h5 id="设置iTerm2透明度"><a href="#设置iTerm2透明度" class="headerlink" title="设置iTerm2透明度"></a>设置iTerm2透明度</h5><p><img src="/developTool/iterm2-ohmyshell/../../images/iTerm2-theme-transparency&amp;blur.png" alt="" title="设置iTerm2透明度"></p><h5 id="设置iTerm2主题配置"><a href="#设置iTerm2主题配置" class="headerlink" title="设置iTerm2主题配置"></a>设置iTerm2主题配置</h5><p><img src="/developTool/iterm2-ohmyshell/../../images/iterm2-theme.png" alt="" title="iTerm2主题配置-"><br><img src="/developTool/iterm2-ohmyshell/../../images/iTerm2-theme-import.png" alt="" title="iTerm2主题配置"><br>如果系统主题不合你的胃口，你可以自定义或者导入开源的配色方案。<br>博主使用的是<a href="https://github.com/mbadolato/iTerm2-Color-Schemes" rel="external nofollow noopener noreferrer" target="_blank">iTerm2-Color-Schemes</a>，在这里面选择一个你喜欢的，或者你也可以使用其他开源的配色方案，不推荐使用需要修改字体的配色方案（虽然很炫）。</p><ul><li>配色方案导入<ol><li>下载<a href="https://github.com/mbadolato/iTerm2-Color-Schemes" rel="external nofollow noopener noreferrer" target="_blank">iTerm2-Color-Schemes</a></li><li>点击上图中的import，在iTerm2-Color-Schemes目录下的schemes目录里面找到一个你喜欢的配色方案。<br><img src="/developTool/iterm2-ohmyshell/../../images/iTerm2-theme-schemes.png" alt="" title="iTerm2主题配置"></li></ol></li></ul><h4 id="iTerm2常用功能及快捷键"><a href="#iTerm2常用功能及快捷键" class="headerlink" title="iTerm2常用功能及快捷键"></a>iTerm2常用功能及快捷键</h4><h5 id="鼠标选中即复制"><a href="#鼠标选中即复制" class="headerlink" title="鼠标选中即复制"></a>鼠标选中即复制</h5><p>在iterm2中，选中某个路径或者某个词汇，那么选中内容会被自动复制。</p><h5 id="屏幕切割-分屏"><a href="#屏幕切割-分屏" class="headerlink" title="屏幕切割/分屏"></a>屏幕切割/分屏</h5><p>command+d：垂直分割；<br>command+shift+d：水平分割<br><img src="/developTool/iterm2-ohmyshell/../../images/iTerm2-slip.png" alt="" title="iTerm2屏幕切割/分屏"></p><h5 id="全屏切换"><a href="#全屏切换" class="headerlink" title="全屏切换"></a>全屏切换</h5><p>command+enter 进入与返回全屏模式</p><h5 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h5><p>新建标签：command + t<br>关闭标签：command + w<br>切换标签：command + 数字 / command + 左右方向键<br>切换全屏/窗口：command + enter<br>查找：command + f<br>垂直分屏：command + d<br>水平分屏：command + shift + d<br>切换屏幕：command + option + 方向键<br>查看历史命令：command + ;<br>查看剪贴板历史：command + shift + h<br>清屏：command + r<br>上一条命令：ctrl + p<br>删除当前光标的字符：ctrl + d<br>删除光标之前的字符：ctrl + h<br>删除光标之前的单词：ctrl + w<br>删除到文本末尾：ctrl + k<br>交换光标处文本：ctrl + t</p><h3 id="ohMyZsh"><a href="#ohMyZsh" class="headerlink" title="ohMyZsh"></a>ohMyZsh</h3><p>shell的类型有很多种，linux下默认的是bash，虽然bash的功能已经很强大，bash的提示功能不够强大，界面也不够炫，并非理想工具。<br>而zsh的功能极其强大，但配置非常繁琐，于是一个实在忍受不了zsh繁琐配置的程序员发起了一个名为<a href="https://github.com/mbadolato/https://ohmyz.sh" rel="external nofollow noopener noreferrer" target="_blank">oh-my-zsh</a>的开源项目</p><h4 id="ohMyZsh安装-更新"><a href="#ohMyZsh安装-更新" class="headerlink" title="ohMyZsh安装/更新"></a>ohMyZsh安装/更新</h4><p>安装命令（下面任选其一执行）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br><span class="line">sh -c <span class="string">"<span class="variable">$(wget https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)</span>"</span></span><br></pre></td></tr></table></figure></p><p>更新命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upgrade_oh_my_zsh</span><br></pre></td></tr></table></figure></p><h4 id="ohMyZsh切换"><a href="#ohMyZsh切换" class="headerlink" title="ohMyZsh切换"></a>ohMyZsh切换</h4><p>查看当前使用的shell<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure></p><p>查看已安装的shell<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure></p><p>切换成zsh<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure></p><h4 id="ohMyZsh自动补全"><a href="#ohMyZsh自动补全" class="headerlink" title="ohMyZsh自动补全"></a>ohMyZsh自动补全</h4><p>执行以下命令将自动补全插件clone到oh-my-zsh的插件目录。<br>下面命令不需要更改可以直接执行，目录是读取的环境变量。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure></p><p>修改ohMyZsh配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure></p><p>将.zshrc文件中plugins=(git) 修改为 plugins=(zsh-autosuggestions git)，重启iTerm2</p><h4 id="ohMyZsh语法高亮"><a href="#ohMyZsh语法高亮" class="headerlink" title="ohMyZsh语法高亮"></a>ohMyZsh语法高亮</h4><p>安装zsh语法插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install zsh-syntax-highlighting</span><br></pre></td></tr></table></figure></p><p>修改ohMyZsh配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.zshrc</span><br></pre></td></tr></table></figure></p><p>最后一行增加如下配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /usr/<span class="built_in">local</span>/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh</span><br></pre></td></tr></table></figure></p><p>然后重新加载ohMyZsh配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>推荐大家一个很好用的软件，<a href="http://zipzapmac.com/Go2Shell" rel="external nofollow noopener noreferrer" target="_blank">Go2Shell</a>，它可以直接在文件夹中打开Terminal。</p><h4 id="Go2Shell安装"><a href="#Go2Shell安装" class="headerlink" title="Go2Shell安装"></a>Go2Shell安装</h4><p>可以在<a href="http://zipzapmac.com/Go2Shell" rel="external nofollow noopener noreferrer" target="_blank">官网下载</a>，或者AppStore搜索Go2Shell</p><h4 id="Go2Shell配置"><a href="#Go2Shell配置" class="headerlink" title="Go2Shell配置"></a>Go2Shell配置</h4><p>安装完成后，执行以下命令会弹出窗口,选择你要用的Terminal然后保存并退出。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open -a go2shell --args config</span><br></pre></td></tr></table></figure></p><p><img src="/developTool/iterm2-ohmyshell/../../images/go2shell-config.png" alt="" title="Go2Shell配置"><br>然后在应用程序目录按住command的同时用鼠标把图标拖放到Finder工具栏<br><img src="/developTool/iterm2-ohmyshell/../../images/go2shell-finder.png" alt="" title="Go2Shell配置"><br>然后在Finder中就可以直接点击Go2Shell的图标进入到对应的目录的Terminal。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;作为码农，大家对Terminal都很熟悉，如果你使用的是Mac，那么MacOS自带的Terminal可能会让你失望。&lt;br&gt;下面我们一步一步
      
    
    </summary>
    
      <category term="Mac工作台" scheme="http://blog.onlinetool.com.cn/categories/Mac%E5%B7%A5%E4%BD%9C%E5%8F%B0/"/>
    
    
      <category term="iTerm2" scheme="http://blog.onlinetool.com.cn/tags/iTerm2/"/>
    
      <category term="ohMyZsh" scheme="http://blog.onlinetool.com.cn/tags/ohMyZsh/"/>
    
      <category term="terminal" scheme="http://blog.onlinetool.com.cn/tags/terminal/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之队列</title>
    <link href="http://blog.onlinetool.com.cn/dataStructure/dataStructure-queue/"/>
    <id>http://blog.onlinetool.com.cn/dataStructure/dataStructure-queue/</id>
    <published>2018-08-07T10:37:39.000Z</published>
    <updated>2020-09-25T03:37:14.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是队列-queue"><a href="#什么是队列-queue" class="headerlink" title="什么是队列(queue)"></a>什么是队列(queue)</h3><p>队列（queue）是一种特殊的线性表，特殊之处在于它只允许在表的前端进行删除操作，而在表的后端进行插入操作，在具体应用中通常用链表或者数组来实现。<br>和栈一样，队列是一种操作受限制的线性表。进行插入操作的端称为队尾，进行删除操作的端称为队头。队列中没有元素时，称为空队列。<br>队列的数据元素又称为队列元素。在队列中插入一个队列元素称为入队，从队列中删除一个队列元素称为出队。<br>因为队列只允许在一端插入，在另一端删除，所以只有最早进入队列的元素才能最先从队列中删除，故队列又称为先进先出<font color="#0099ff">（FIFO—first in first out）</font><br><a href="https://github.com/ch0ice/blog-example/tree/master/data-structure/queue/" rel="external nofollow noopener noreferrer" target="_blank"><font color="#0099ff">点击这里查看博客对应的完整代码</font></a></p><h3 id="非循环队列（普通队列）"><a href="#非循环队列（普通队列）" class="headerlink" title="非循环队列（普通队列）"></a>非循环队列（普通队列）</h3><p>非循环队列是最简单的队列，使用动态数组/数组实现，大小是固定的，虽然使用数组作为队列的存储结构，但是在队列中只操作头尾节点，所以插入（入队）和查找（出队）都很快。<br>非循环队列的缺点是可能会出现”假溢出”的情况。<br>下面是一个非循环队列的实现。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_QSIZE 5 <span class="comment">// 最大队列长度</span></span></span><br><span class="line"><span class="comment">// 队列的数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Q_Data;</span><br><span class="line"><span class="comment">// 队列的存储结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line">    Q_Data Array[MAX_QSIZE]; <span class="comment">// 阵列空间大小</span></span><br><span class="line">    <span class="keyword">int</span> front; <span class="comment">// 队头</span></span><br><span class="line">    <span class="keyword">int</span> rear; <span class="comment">// 队尾</span></span><br><span class="line">    <span class="keyword">int</span> length; <span class="comment">// 队列长度</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个空队列Q</span></span><br><span class="line"><span class="function">Queue* <span class="title">Q_Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Queue *Q = (Queue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Queue));</span><br><span class="line">    <span class="keyword">if</span> (!Q)&#123;</span><br><span class="line">        <span class="comment">// 存储分配失败</span></span><br><span class="line">        <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    Q-&gt;front = Q-&gt;rear = Q-&gt;length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将Q清为空队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Q_Clear</span><span class="params">(Queue *Q)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//清除头尾下标和长度</span></span><br><span class="line">    Q-&gt;front = Q-&gt;rear = Q-&gt;length = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 入列</span></span><br><span class="line"><span class="function">Q_Data <span class="title">Q_Put</span><span class="params">(Queue *Q, Q_Data x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果当前元素数量等于最大数量 返回 -1</span></span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;rear == MAX_QSIZE)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    Q-&gt;Array[Q-&gt;rear] = x;</span><br><span class="line">    Q-&gt;rear++;</span><br><span class="line">    <span class="comment">//length + 1</span></span><br><span class="line">    Q-&gt;length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 出列</span></span><br><span class="line"><span class="function">Q_Data <span class="title">Q_Poll</span><span class="params">(Queue *Q,Q_Data &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果当前元素数量等于最大数量 返回 -1</span></span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;front == MAX_QSIZE)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    e = Q-&gt;Array[Q-&gt;front];</span><br><span class="line">    Q-&gt;front++;</span><br><span class="line">    <span class="comment">// 移出后減少1</span></span><br><span class="line">    Q-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><blockquote><p>循环队列可以更简单防止”假溢出”的发生，但队列大小是固定的，使用动态数组/数组实现，相对单链队列来说，插入（入队）和查找（出队）都很快。<br>这里说的循环是逻辑上的循环，体现在入队（put）出队（poll）的操作上面，比如长度是10，队列的头尾指针会始终在0 ～ 9之间循环，也就永远不会出现溢出的情况，因此称为循环队列。<br>循环队列中的循环是以舍弃队列中一个元素空间来达成的，也就是循环队列最大能存储maxSize - 1个元素，比如最大长度是10，那么只能保存9个元素到队列中。<br>下面是一个循环队列的实现。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 队列的顺序存储结构(循环队列)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_QSIZE 6 <span class="comment">// 最大队列长度+1</span></span></span><br><span class="line"><span class="comment">// 队列的数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Q_Data;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Q_Data *data; <span class="comment">// 初始化的动态分配存储空间</span></span><br><span class="line">    <span class="keyword">int</span> front; <span class="comment">// 头指针，若队列不空，指向队列头元素</span></span><br><span class="line">    <span class="keyword">int</span> rear; <span class="comment">// 尾指针，若队列不空，指向队列尾元素的下一个位置</span></span><br><span class="line">&#125; SqQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个空队列Q</span></span><br><span class="line"><span class="function">SqQueue* <span class="title">Q_Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqQueue *Q = (SqQueue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SqQueue));</span><br><span class="line">    <span class="comment">// 存储分配失败</span></span><br><span class="line">    <span class="keyword">if</span> (!Q)&#123;</span><br><span class="line">        <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    &#125;</span><br><span class="line">    Q-&gt;data = (Q_Data *)<span class="built_in">malloc</span>(MAX_QSIZE * <span class="keyword">sizeof</span>(Q_Data));</span><br><span class="line">    <span class="comment">// 存储分配失败</span></span><br><span class="line">    <span class="keyword">if</span> (!Q-&gt;data)&#123;</span><br><span class="line">        <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    &#125;</span><br><span class="line">    Q-&gt;front = Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 销毁队列Q，Q不再存在</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Q_Destroy</span><span class="params">(SqQueue *Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;data)</span><br><span class="line">        <span class="built_in">free</span>(Q-&gt;data);</span><br><span class="line">    Q-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line">    Q-&gt;front = Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">free</span>(Q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将Q清为空队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Q_Clear</span><span class="params">(SqQueue *Q)</span> </span>&#123;</span><br><span class="line">    Q-&gt;front = Q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若队列Q为空队列，则返回1；否则返回-1</span></span><br><span class="line"><span class="function">Q_Data <span class="title">Q_Empty</span><span class="params">(SqQueue Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear) <span class="comment">// 队列空的标志</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 返回Q的元素个数，即队列的长度</span></span><br><span class="line"><span class="function">Q_Data <span class="title">Q_Length</span><span class="params">(SqQueue Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (Q.rear - Q.front + MAX_QSIZE) % MAX_QSIZE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若队列不空，则用e返回Q的队头元素，并返回OK；否则返回ERROR</span></span><br><span class="line"><span class="function">Q_Data <span class="title">Q_GetHead</span><span class="params">(SqQueue Q, Q_Data &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear) <span class="comment">// 队列空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    e = Q.data[Q.front];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印队列中的内容</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Q_Print</span><span class="params">(SqQueue Q)</span> </span>&#123;</span><br><span class="line">    Q_Data p = Q.front % MAX_QSIZE;</span><br><span class="line">    <span class="keyword">while</span> (Q.rear != p) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; Q.data[p] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        p = (p + <span class="number">1</span>) % MAX_QSIZE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 插入元素e为Q的新的队尾元素</span></span><br><span class="line"><span class="function">Q_Data <span class="title">Q_Put</span><span class="params">(SqQueue *Q, Q_Data e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((Q-&gt;rear + <span class="number">1</span>) % MAX_QSIZE == Q-&gt;front) <span class="comment">// 队列满</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    Q-&gt;data[Q-&gt;rear] = e;</span><br><span class="line">    Q-&gt;rear = (Q-&gt;rear + <span class="number">1</span>) % MAX_QSIZE;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若队列不空，则删除Q的队头元素，用e返回其值，并返回1；否则返回-1</span></span><br><span class="line"><span class="function">Q_Data <span class="title">Q_Poll</span><span class="params">(SqQueue *Q, Q_Data &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;front == Q-&gt;rear) <span class="comment">// 队列空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    e = Q-&gt;data[Q-&gt;front];</span><br><span class="line">    Q-&gt;front = (Q-&gt;front + <span class="number">1</span>) % MAX_QSIZE;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="单链队列"><a href="#单链队列" class="headerlink" title="单链队列"></a>单链队列</h3><blockquote><p>单链队列使用链表作为基本数据结构，所以不存在”假溢出”的问题，队列长度也没有限制。<br>但插入和读取的时间代价较高，虽然使用链表实现，但链表的优势（O(1)任意节点插入）在队列中被抹去了，因为链表不允许操纵除头尾节点以外的节点，每次插入都需右移指针。<br>下面是一个单链队列的实现。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 队列的数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Q_Data;</span><br><span class="line"><span class="comment">// 定义单链队列的存储结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> &#123;</span></span><br><span class="line">    Q_Data data;</span><br><span class="line">    QNode *next;</span><br><span class="line">&#125;QNode,*QNodePtr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkQueue</span>&#123;</span></span><br><span class="line">    <span class="comment">//队头 队尾 指针</span></span><br><span class="line">    QNodePtr front,rear;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造一个空队列Q</span></span><br><span class="line"><span class="function">LinkQueue* <span class="title">Q_Init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//申请内存</span></span><br><span class="line">    LinkQueue* Q = (LinkQueue*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkQueue));</span><br><span class="line">    <span class="comment">//如果 Q 为 NULL 说明 内存申请失败，结束程序</span></span><br><span class="line">    <span class="keyword">if</span> (!Q)</span><br><span class="line">        <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    <span class="comment">//初始化头尾节点 指向相同地址</span></span><br><span class="line">    Q-&gt;front = Q-&gt;rear = (QNodePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">    <span class="comment">//如果 Q-&gt;front 为 NULL 说明 内存申请失败，结束程序</span></span><br><span class="line">    <span class="keyword">if</span> (!Q-&gt;front)</span><br><span class="line">        <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    Q-&gt;front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> Q;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 销毁队列Q(无论空否均可)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Q_Destroy</span><span class="params">(LinkQueue *Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (Q-&gt;front) &#123;</span><br><span class="line">        <span class="comment">//将队尾指向队头下一个节点的地址（第1个节点）</span></span><br><span class="line">        Q-&gt;rear = Q-&gt;front-&gt;next;</span><br><span class="line">        <span class="comment">//回收队头</span></span><br><span class="line">        <span class="built_in">free</span>(Q-&gt;front);</span><br><span class="line">        <span class="comment">//将队头指向队尾（相当于第1个节点变成了队头，然后依次第2个第3个、、、</span></span><br><span class="line">        <span class="comment">//直到没有下一个节点，也就是 Q-&gt;front == NULL 的时候）</span></span><br><span class="line">        Q-&gt;front = Q-&gt;rear;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(Q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将Q清为空队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Q_Clear</span><span class="params">(LinkQueue *Q)</span> </span>&#123;</span><br><span class="line">    QNodePtr p, q;</span><br><span class="line">    <span class="comment">//将队尾指向队头点的地址</span></span><br><span class="line">    Q-&gt;rear = Q-&gt;front;</span><br><span class="line">    <span class="comment">//取出第1个节点</span></span><br><span class="line">    p = Q-&gt;front-&gt;next;</span><br><span class="line">    <span class="comment">//回收第1个节点</span></span><br><span class="line">    Q-&gt;front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        <span class="comment">//将 q 指向 p（第1个节点）</span></span><br><span class="line">        q = p;</span><br><span class="line">        <span class="comment">//将 p 指向 第2个节点</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        <span class="comment">//回收第2个节点</span></span><br><span class="line">        <span class="built_in">free</span>(q);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若Q为空队列，则返回-1，否则返回1</span></span><br><span class="line"><span class="function">Q_Data <span class="title">Q_Empty</span><span class="params">(LinkQueue Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 求队列的长度</span></span><br><span class="line"><span class="function">Q_Data <span class="title">Q_Length</span><span class="params">(LinkQueue Q)</span> </span>&#123;</span><br><span class="line">    Q_Data i = <span class="number">0</span>;</span><br><span class="line">    QNodePtr p;</span><br><span class="line">    p = Q.front;</span><br><span class="line">    <span class="comment">//遍历队列中的节点，直到队尾等于队头</span></span><br><span class="line">    <span class="keyword">while</span> (Q.rear != p) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 打印队列中的内容</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Q_Print</span><span class="params">(LinkQueue Q)</span> </span>&#123;</span><br><span class="line">    Q_Data i = <span class="number">0</span>;</span><br><span class="line">    QNodePtr p;</span><br><span class="line">    p = Q.front;</span><br><span class="line">    <span class="keyword">while</span> (Q.rear != p) &#123;</span><br><span class="line">        i++;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p-&gt;next-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若队列不空，则用e返回Q的队头元素，并返回1，否则返回-1</span></span><br><span class="line"><span class="function">Q_Data <span class="title">Q_GetHead</span><span class="params">(LinkQueue Q, Q_Data &amp;e)</span> </span>&#123;</span><br><span class="line">    QNodePtr p;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    p = Q.front-&gt;next;</span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 插入元素e为Q的新的队尾元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Q_Put</span><span class="params">(LinkQueue *Q, Q_Data e)</span> </span>&#123;</span><br><span class="line">    QNodePtr p = (QNodePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">    <span class="keyword">if</span> (!p) <span class="comment">// 存储分配失败</span></span><br><span class="line">        <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//FIFO，将新节点追加到尾节点后面</span></span><br><span class="line">    Q-&gt;rear-&gt;next = p;</span><br><span class="line">    <span class="comment">//将新的节点变成尾节点</span></span><br><span class="line">    Q-&gt;rear = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 若队列不空，删除Q的队头元素，用e返回其值，并返回1，否则返回-1</span></span><br><span class="line"><span class="function">Q_Data <span class="title">Q_Poll</span><span class="params">(LinkQueue *Q,Q_Data &amp;e)</span> </span>&#123;</span><br><span class="line">    QNodePtr p;</span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;front == Q-&gt;rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">//取出头节点</span></span><br><span class="line">    p = Q-&gt;front-&gt;next;</span><br><span class="line">    <span class="comment">//取出头节点的数据</span></span><br><span class="line">    e = p-&gt;data;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    Q-&gt;front-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;rear == p)</span><br><span class="line">        Q-&gt;rear = Q-&gt;front;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="什么是假溢出"><a href="#什么是假溢出" class="headerlink" title="什么是假溢出"></a>什么是假溢出</h3><blockquote><p>假溢出就是系统作为队列用的存储区还没有满,但队列却发生了溢出,我们把这种现象称为”假溢出”。<br>假设我们有一个非循环队列Q，队头指针为Q-&gt;front,队尾指针为Q-&gt;rear,长度为m，队列中元素在向量中的下标从0到m-1。<br>入队Q-&gt;rear++，出队Q-&gt;front++，现在入队m个元素到队列中，此时Q-&gt;front == 0，Q-&gt;rear == m，<br>现在出队m个元素，此时 Q-&gt;front == Q-&gt;rear == m，现在队列中已经没有元素，但此时再做入队操作时，就发生了”假溢出”。<br>下面举个例子<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"初始化非循环队列"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Queue *Q = Q_Init();</span><br><span class="line"><span class="comment">//此时 Q-&gt;front == 0,Q-&gt;rear == 0;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"插入数据（put）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Q_Put(Q, <span class="number">111</span>);</span><br><span class="line">Q_Put(Q, <span class="number">222</span>);</span><br><span class="line">Q_Put(Q, <span class="number">333</span>);</span><br><span class="line">Q_Put(Q, <span class="number">444</span>);</span><br><span class="line">Q_Put(Q, <span class="number">555</span>);</span><br><span class="line"><span class="comment">//此时 Q-&gt;front == 0,Q-&gt;rear == 5;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"取出并删除元素（poll）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Q_Data head_data;</span><br><span class="line">Q_Poll(Q,head_data);</span><br><span class="line">Q_Poll(Q,head_data);</span><br><span class="line">Q_Poll(Q,head_data);</span><br><span class="line">Q_Poll(Q,head_data);</span><br><span class="line">Q_Poll(Q,head_data);</span><br><span class="line"><span class="comment">//此时 Q-&gt;front == 5,Q-&gt;rear == 5;队列中没有数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"插入数据（put）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Q_Put(Q, <span class="number">666</span>);</span><br><span class="line"><span class="comment">//此时 Q-&gt;front == 5,Q-&gt;rear == 5; 没有变化，Q_Put() 会返回 -1，也就是插入失败，这就发生了 "假溢出"</span></span><br></pre></td></tr></table></figure></p></blockquote><h3 id="怎么解决假溢出"><a href="#怎么解决假溢出" class="headerlink" title="怎么解决假溢出"></a>怎么解决假溢出</h3><ol><li><p>将队列看成首尾相连即循环队列</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环队列中有两种方法可以判断队空或队满</span></span><br><span class="line"><span class="comment">// 1.“牺牲一个单元”，Q-&gt;front == Q-&gt;rear 时为队空，(Q-&gt;rear + 1) % MAX_QSIZE == Q-&gt;front 时为队满。</span></span><br><span class="line"><span class="comment">// 2.“设标记”，如设标记tag，若出队时发生Q-&gt;front==Q-&gt;rear为队空，tag == 1；若入队时发生Q-&gt;front == Q-&gt;rear为队满，tag == 2。</span></span><br><span class="line"><span class="comment">// 一般来说都是使用第1种方法，下面解析一下第一种方法。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"初始化循环队列"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">SqQueue *Q = Q_Init();</span><br><span class="line"><span class="comment">//此时 Q-&gt;front == 0,Q-&gt;rear == 0;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"插入数据（put）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//入队时 Q-&gt;rear = (Q-&gt;rear + 1) % MAX_QSIZE</span></span><br><span class="line">Q_Data front_data;</span><br><span class="line">Q_Put(Q,<span class="number">111</span>);</span><br><span class="line">Q_Put(Q,<span class="number">222</span>);</span><br><span class="line">Q_Put(Q,<span class="number">333</span>);</span><br><span class="line">Q_Put(Q,<span class="number">444</span>);</span><br><span class="line">Q_Put(Q,<span class="number">555</span>);</span><br><span class="line"><span class="comment">//此时 Q-&gt;front == 0,Q-&gt;rear == 5;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"取出并删除元素（poll）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//出队时 Q-&gt;front = (Q-&gt;front + 1) % MAX_QSIZE</span></span><br><span class="line">Q_Data head_data;</span><br><span class="line">Q_Poll(Q,head_data);</span><br><span class="line">Q_Poll(Q,head_data);</span><br><span class="line">Q_Poll(Q,head_data);</span><br><span class="line">Q_Poll(Q,head_data);</span><br><span class="line">Q_Poll(Q,head_data);</span><br><span class="line"><span class="comment">//此时 Q-&gt;front == 5,Q-&gt;rear == 5;队列中没有数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"插入数据（put）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//入队时 Q-&gt;rear = (Q-&gt;rear + 1) % MAX_QSIZE</span></span><br><span class="line">Q_Put(Q,<span class="number">666</span>);</span><br><span class="line">Q_Put(Q,<span class="number">777</span>);</span><br><span class="line">Q_Put(Q,<span class="number">888</span>);</span><br><span class="line"><span class="comment">//此时 Q-&gt;front == 5,Q-&gt;rear == 2;队列三个元素</span></span><br></pre></td></tr></table></figure></li><li><p>出队时将队列所有元素向前“平移”1位</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"初始化非循环队列"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Queue *Q = Q_Init();</span><br><span class="line"><span class="comment">//此时 Q-&gt;front == 0,Q-&gt;rear == 0;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"插入数据（put）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Q_Put(Q, <span class="number">111</span>);</span><br><span class="line">Q_Put(Q, <span class="number">222</span>);</span><br><span class="line">Q_Put(Q, <span class="number">333</span>);</span><br><span class="line">Q_Put(Q, <span class="number">444</span>);</span><br><span class="line">Q_Put(Q, <span class="number">555</span>);</span><br><span class="line"><span class="comment">//此时 Q-&gt;front == 0,Q-&gt;rear == 5;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将非循环队列出列方法更改为如下</span></span><br><span class="line"><span class="comment">// 出列 解决"假溢出"</span></span><br><span class="line"><span class="function">Q_Data <span class="title">Q_Poll_New</span><span class="params">(Queue *Q,Q_Data &amp;e)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果当前元素数量等于最大数量 返回 -1</span></span><br><span class="line">    <span class="keyword">if</span> (Q-&gt;front == <span class="number">0</span> || Q-&gt;front == MAX_QSIZE)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    e = Q-&gt;Array[Q-&gt;front];</span><br><span class="line">    <span class="keyword">int</span> x = MAX_QSIZE;</span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">        Q-&gt;Array[x<span class="number">-1</span>] = Q-&gt;Array[x];</span><br><span class="line">        x--;</span><br><span class="line">    &#125;</span><br><span class="line">    Q-&gt;rear--;</span><br><span class="line">    <span class="comment">// 移出后減少1</span></span><br><span class="line">    Q-&gt;length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"取出并删除元素（poll）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//调用新出列方法</span></span><br><span class="line">Q_Data head_data;</span><br><span class="line">Q_Poll_New(Q,head_data);</span><br><span class="line">Q_Poll_New(Q,head_data);</span><br><span class="line">Q_Poll_New(Q,head_data);</span><br><span class="line">Q_Poll_New(Q,head_data);</span><br><span class="line">Q_Poll_New(Q,head_data);</span><br><span class="line"><span class="comment">//此时 Q-&gt;front == 0,Q-&gt;rear == 0;队列中没有数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"插入数据（put）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Q_Put(Q, <span class="number">666</span>);</span><br><span class="line"><span class="comment">//此时 Q-&gt;front == 0,Q-&gt;rear == 1;队列中1个元素</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>非循环队列是最简单的队列，动态数组/数组实现，队列大小是固定，插入（入队）和查找（出队）快，可能会出现”假溢出”的情况。</li><li>动态数组/数组实现，队列大小是固定，插入（入队）和查找（出队）快，不会出现”假溢出”。</li><li>单链队列使用链表实现，不存在”假溢出”的问题，队列长度没有限制，插入和读取的时间代价较高。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是队列-queue&quot;&gt;&lt;a href=&quot;#什么是队列-queue&quot; class=&quot;headerlink&quot; title=&quot;什么是队列(queue)&quot;&gt;&lt;/a&gt;什么是队列(queue)&lt;/h3&gt;&lt;p&gt;队列（queue）是一种特殊的线性表，特殊之处在于它只允许在表的
      
    
    </summary>
    
      <category term="数据结构" scheme="http://blog.onlinetool.com.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://blog.onlinetool.com.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="队列" scheme="http://blog.onlinetool.com.cn/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之向量</title>
    <link href="http://blog.onlinetool.com.cn/dataStructure/dataStructure-vector/"/>
    <id>http://blog.onlinetool.com.cn/dataStructure/dataStructure-vector/</id>
    <published>2018-08-02T16:00:00.000Z</published>
    <updated>2020-09-25T03:37:14.686Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是向量-vector"><a href="#什么是向量-vector" class="headerlink" title="什么是向量(vector)"></a>什么是向量(vector)</h3><p>向量（vector）是一个抽象数据结构，为一组数据模型，定义一组操作，不涉及具体的储存方式，可以用不同的数据类型来实现，多数使用数组来实现，所以也可以认为，向量是数组的抽象与泛化。<br>向量（Vector）和列表（List）都属于序列，所谓序列就是以某种规律依次排列的一组对象，是数据结构设计的基础。</p><p><a href="https://github.com/ch0ice/blog-example/tree/master/data-structure/vector/" rel="external nofollow noopener noreferrer" target="_blank"><font color="#0099ff">点击这里查看博客对应的完整代码</font></a></p><h3 id="基于数组的简单实现"><a href="#基于数组的简单实现" class="headerlink" title="基于数组的简单实现"></a>基于数组的简单实现</h3><p>下面是一个简单的向量接口，包含一些常用的操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">VectorTemp</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(E e, <span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(E e, <span class="keyword">int</span> index)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> VectorViolationException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E e)</span> <span class="keyword">throws</span> VectorViolationException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, E obj)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> VectorViolationException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是上面我们定义的操作实现<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyVector</span>&lt;<span class="title">E</span>&gt; <span class="keyword">implements</span> <span class="title">VectorTemp</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> capacityIncrement;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> elementCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyVector</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                initialCapacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">        <span class="keyword">this</span>.capacityIncrement = initialCapacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyVector</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyVector</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">        elementData = c.toArray();</span><br><span class="line">        elementCount = elementData.length;</span><br><span class="line">        <span class="comment">// c.toArray might (incorrectly) not return Object[] (see 6260652)</span></span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)&#123;</span><br><span class="line">            elementData = Arrays.copyOf(elementData, elementCount, Object[].class);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elementCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elementCount == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexOf(e, <span class="number">0</span>) &gt;= <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; elementCount ; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (elementData[i]==<span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index ; i &lt; elementCount ; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> lastIndexOf(o, elementCount-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(Object o, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= elementCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(index + <span class="string">" &gt;= "</span> + elementCount);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (elementData[i] == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="keyword">if</span> (o.equals(elementData[i])) &#123;</span><br><span class="line">                    <span class="keyword">return</span> i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= elementCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArrayIndexOutOfBoundsException(index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> elementData(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, Object element)</span> <span class="keyword">throws</span> VectorViolationException </span>&#123;</span><br><span class="line">        rankValid(index);</span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Object e)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(elementCount + <span class="number">1</span> &gt;= capacityIncrement)&#123;</span><br><span class="line">            capacity();</span><br><span class="line">        &#125;</span><br><span class="line">        elementData[elementCount] = e;</span><br><span class="line">        elementCount++;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">insert</span><span class="params">(<span class="keyword">int</span> index, E obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt; elementCount)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> VectorViolationException(<span class="string">"rankOutOfBound"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(elementCount + <span class="number">1</span> &gt;= capacityIncrement)&#123;</span><br><span class="line">            capacity();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = elementCount; i &gt; index; i--) &#123;</span><br><span class="line">            elementData[i] = elementData[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        elementData[index] = obj;</span><br><span class="line">        elementCount++;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> <span class="keyword">throws</span> VectorViolationException </span>&#123;</span><br><span class="line">        rankValid(index);</span><br><span class="line">        E bak = elementData(index);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = index; i &lt; elementCount - <span class="number">1</span>; i++)&#123;</span><br><span class="line">            elementData[i] = elementData[i + <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        elementCount--;</span><br><span class="line">        <span class="keyword">return</span> bak;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">capacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        capacityIncrement *= <span class="number">2</span>;</span><br><span class="line">        Object[] arrObj = <span class="keyword">new</span> Object[capacityIncrement];</span><br><span class="line">        System.arraycopy(elementData, <span class="number">0</span>, arrObj, <span class="number">0</span>, elementCount);</span><br><span class="line">        elementData = arrObj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rankValid</span><span class="params">(<span class="keyword">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index &lt; <span class="number">0</span> || index &gt;= capacityIncrement)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> VectorViolationException(<span class="string">"rankOutOfBound"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是测试代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">VectorTemp&lt;String&gt; myVector = <span class="keyword">new</span> MyVector&lt;String&gt;(<span class="number">2</span>);</span><br><span class="line">System.out.println(<span class="string">"是否为空："</span> + myVector.isEmpty());</span><br><span class="line">System.out.println(<span class="string">"增加元素,当前大小："</span> + myVector.size());</span><br><span class="line">myVector.add(<span class="string">"A"</span>);</span><br><span class="line">myVector.add(<span class="string">"B"</span>);</span><br><span class="line">myVector.add(<span class="string">"C"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myVector.size(); i++)&#123;</span><br><span class="line">    System.out.println(myVector.get(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"是否为空："</span> + myVector.isEmpty());</span><br><span class="line">System.out.println(<span class="string">"插入元素,当前大小："</span> + myVector.size());</span><br><span class="line">myVector.insert(<span class="number">2</span>,<span class="string">"I"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myVector.size(); i++)&#123;</span><br><span class="line">    System.out.println(myVector.get(i));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"删除元素,当前大小："</span> + myVector.size());</span><br><span class="line">myVector.remove(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myVector.size(); i++)&#123;</span><br><span class="line">    System.out.println(myVector.get(i));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"是否存在元素R："</span> + myVector.contains(<span class="string">"R"</span>));</span><br><span class="line">System.out.println(<span class="string">"替换元素,当前大小："</span> + myVector.size());</span><br><span class="line">myVector.set(<span class="number">1</span>,<span class="string">"R"</span>);</span><br><span class="line">System.out.println(<span class="string">"是否存在元素R："</span> + myVector.contains(<span class="string">"R"</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myVector.size(); i++)&#123;</span><br><span class="line">    System.out.println(myVector.get(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果</span></span><br><span class="line">是否为空：<span class="keyword">true</span></span><br><span class="line">增加元素,当前大小：<span class="number">0</span></span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">C</span><br><span class="line">是否为空：<span class="keyword">false</span></span><br><span class="line">插入元素,当前大小：<span class="number">3</span></span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">I</span><br><span class="line">C</span><br><span class="line">删除元素,当前大小：<span class="number">4</span></span><br><span class="line">A</span><br><span class="line">B</span><br><span class="line">I</span><br><span class="line">是否存在元素R：<span class="keyword">false</span></span><br><span class="line">替换元素,当前大小：<span class="number">3</span></span><br><span class="line">是否存在元素R：<span class="keyword">true</span></span><br><span class="line">A</span><br><span class="line">R</span><br><span class="line">I</span><br></pre></td></tr></table></figure></p><p>到这里，一个完整的向量实现就结束了，感兴趣的可以看看java中的向量（<font color="#0099ff">java.util.Vector</font>）源码。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>向量是一个抽象数据结构，为一组数据模型，定义一组操作，不涉及具体的储存方式，可以用不同的数据类型来实现。</li><li>向量属于序列的一种，以某种规律依次排列的一组对象。</li><li>向量是是数据结构设计的基础。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是向量-vector&quot;&gt;&lt;a href=&quot;#什么是向量-vector&quot; class=&quot;headerlink&quot; title=&quot;什么是向量(vector)&quot;&gt;&lt;/a&gt;什么是向量(vector)&lt;/h3&gt;&lt;p&gt;向量（vector）是一个抽象数据结构，为一组数据模型，
      
    
    </summary>
    
      <category term="数据结构" scheme="http://blog.onlinetool.com.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://blog.onlinetool.com.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="向量" scheme="http://blog.onlinetool.com.cn/tags/%E5%90%91%E9%87%8F/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之链表</title>
    <link href="http://blog.onlinetool.com.cn/dataStructure/dataStructure-chainTable/"/>
    <id>http://blog.onlinetool.com.cn/dataStructure/dataStructure-chainTable/</id>
    <published>2018-07-27T16:00:00.000Z</published>
    <updated>2020-09-25T03:37:14.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是链表"><a href="#什么是链表" class="headerlink" title="什么是链表"></a>什么是链表</h3><p>链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节点里存到下一个节点的指针(Pointer)。<br>由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而顺序表相应的时间复杂度分别是O(logn)和O(1)。<br>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。<br>在计算机科学中，链表作为一种基础的数据结构可以用来生成其它类型的数据结构。链表通常由一连串节点组成，每个节点包含任意的实例数据（data fields）和一或两个用来指向上一个/或下一个节点的位置的链接（”links”）。<br>链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的访问往往要在不同的排列顺序中转换。<br>而链表是一种自我指示数据类型，因为它包含指向另一个相同类型的数据的指针（链接）。<br>链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。<br>链表有很多种不同的类型：单向链表，双向链表以及循环链表等。</p><p><a href="https://github.com/ch0ice/blog-example/tree/master/data-structure/chain-table/" rel="external nofollow noopener noreferrer" target="_blank"><font color="#0099ff">点击这里查看博客对应的完整代码</font></a></p><h3 id="单向链表"><a href="#单向链表" class="headerlink" title="单向链表"></a>单向链表</h3><p><img src="/dataStructure/dataStructure-chainTable/source/images/singleChainTable.png" alt="" title="单向链表"><br>链表中最简单的一种是单向链表，它包含两个域，一个信息域和一个指针域。这个链接指向列表中的下一个节点，而最后一个节点则指向一个空值。<br>一个单向链表的节点被分成两个部分。<br>第一个部分保存或者显示关于节点的信息，第二个部分存储下一个节点的地址。单向链表只可向一个方向遍历。<br>链表最基本的结构是在每个节点保存数据和到下一个节点的地址，在最后一个节点保存一个特殊的结束标记，另外在一个固定的位置保存指向第一个节点的指针，有的时候也会同时储存指向最后一个节点的指针。<br>一般查找一个节点的时候需要从第一个节点开始每次访问下一个节点，一直访问到需要的位置。但是也可以提前把一个节点的位置另外保存起来，然后直接访问。<br>当然如果只是访问数据就没必要了，不如在链表上储存指向实际数据的指针。这样一般是为了访问链表中的下一个或者前一个节点（需要储存反向的指针，也就是双向链表）。<br>相对于下面说的双向链表，这种普通的，每个节点只有一个指针的链表也叫单向链表，或者单链表，通常用在每次都只会按顺序遍历这个链表的时候。</p><h4 id="单向链表的实现"><a href="#单向链表的实现" class="headerlink" title="单向链表的实现"></a>单向链表的实现</h4><p>定义单向链表数据结构<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;</span><br><span class="line">    ss* next;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>这是一个最简单的单向链表的数据结构，<font color="#0099ff">链表中的每个元素我们称之为node，node中的data为数据域，next为指针域，指向下一个元素</font>，下面我们来声明几个链表，并给链表的<font color="#0099ff">数据域</font>中放上数据。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">node* s1 = <span class="keyword">new</span> node();</span><br><span class="line">s1-&gt;data = <span class="number">1</span>;</span><br><span class="line">node* s2 = <span class="keyword">new</span> node();</span><br><span class="line">s2-&gt;data = <span class="number">2</span>;</span><br><span class="line">node* s3 = <span class="keyword">new</span> node();</span><br><span class="line">s3-&gt;data = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>这里我们初始化了3个node，将node关联起来后才是一个完整的链表，那么怎么关联呢？我们继续看下面的代码。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">s1-&gt;next = s2;</span><br><span class="line">s2-&gt;next = s3;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印链表中的数据</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1-&gt;next-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1-&gt;next-&gt;next-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//输出结果为</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br></pre></td></tr></table></figure></p><p>没错，到这里我们已经实现了一个完整的链表了，是不是很简单。<br>下面我们先插入一个节点，并输出一下每个node的内存地址和每个node中的数据。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  插入节点</span></span><br><span class="line"><span class="comment">//  链表的插入非常简单，复杂度仅为O(1)。</span></span><br><span class="line"><span class="comment">//  这也就是为什么说链表插入快，因为他只需要改变插入元素前后的指针指向。</span></span><br><span class="line">node* s4 = <span class="keyword">new</span> node();</span><br><span class="line">s4-&gt;data = <span class="number">40</span>;</span><br><span class="line">s1-&gt;next = s4;</span><br><span class="line">s4-&gt;next = s2;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  打印内存地址</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s3 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//输出的内存地址(以下地址仅供参考，每个计算机输出的内存地址都不一样)</span></span><br><span class="line"><span class="comment">//以下内存地址毫无规律，如果有，纯属巧合~</span></span><br><span class="line"><span class="comment">//0xff1478</span></span><br><span class="line"><span class="comment">//0xff14a8</span></span><br><span class="line"><span class="comment">//0xff14b8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  链表的查询复杂度为O(n)，除非查询的是首元素。</span></span><br><span class="line"><span class="comment">//  由于链表内存不连续，所以没有下标的概念，取值只能循环取，</span></span><br><span class="line"><span class="comment">//  这也就是为什么链表查询慢的原因</span></span><br><span class="line"><span class="comment">//  因为我们例子中的链表很短，并且为了更加直观，所以我们这里没有用循环。</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1-&gt;next-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1-&gt;next-&gt;next-&gt;data &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//输出结果为</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//40</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br></pre></td></tr></table></figure></p><p>从上面的代码中很明显的体现出了链表的特点，<font color="#0099ff">线性、无序(这里说的无序是内存无序，和数据顺序无关)、查询慢、插入快</font>。</p><h3 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h3><p><img src="/dataStructure/dataStructure-chainTable/../../images/doubleChainTable.png" alt="" title="双向链表"><br>一种更复杂的链表是“双向链表”或“双面链表”。<br>双向链表中不仅有指向后一个节点的指针，还有指向前一个节点的指针。<br>这样可以从任何一个节点访问前一个节点，当然也可以访问后一个节点，以至整个链表。<br>一般是在需要大批量存储另外储存数据在链表中的位置的时候用。双向链表也可以配合下面的其他链表的扩展使用。<br>由于另外储存了指向链表内容的指针，并且可能会修改相邻的节点，有的时候第一个节点可能会被删除或者在之前添加一个新的节点，这时候就要修改指向首个节点的指针。<br>有一种方便的可以消除这种特殊情况的方法是在最后一个节点之后、第一个节点之前储存一个永远不会被删除或者移动的虚拟节点（头节点），形成一个下面说的循环链表。<br>这个虚拟节点之后的节点就是真正的第一个节点。</p><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p><img src="/dataStructure/dataStructure-chainTable/../../images/loopChainTable.png" alt="" title="循环链表"><br>将一个单向链表或双向链表首尾相连，就成了循环链表。<br>这种方式在单向和双向链表中皆可实现，区别仅在于单向循环链表只能从一个方向循环，双向循环链表可以超两个方向循环。<br>循环链表可以被视为“无头无尾”，循环链表中第一个节点之前就是最后一个节点，反之亦然。<br>循环链表的无边界使得在这样的链表上设计算法会比普通链表更加容易。<br>对于新加入的节点应该是在第一个节点之前还是最后一个节点之后可以根据实际要求灵活处理，区别不大(详见下面实例代码)。</p><h4 id="双向循环链表的实现"><a href="#双向循环链表的实现" class="headerlink" title="双向循环链表的实现"></a>双向循环链表的实现</h4><p>有了上面的了解，我们下面来实现一个完整的<font color="#0099ff">双向循环链表</font>。<br>首先我们定义头文件，头文件大家可以理解为java语言中的接口，如果我们不定义头文件也是可以的，只不过定义了头文件，我们实现了什么功能，大家在头文件中可以一目了然。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LINKED_LIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINKED_LIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">void</span> <span class="title">node_print_fun_t</span><span class="params">(<span class="keyword">void</span>*)</span></span>;</span><br><span class="line"><span class="comment">//比较</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="keyword">int</span> <span class="title">node_compare_fun_t</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span>*, <span class="keyword">const</span> <span class="keyword">void</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">void</span> LINKED_LIST_T;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">LINKED_LIST_T *<span class="title">linked_list_new</span><span class="params">(<span class="keyword">int</span> elmsize)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">linked_list_delete</span><span class="params">(<span class="keyword">int</span> *ptr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入节点 尾插入</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">linked_list_node_append</span><span class="params">(<span class="keyword">int</span> *ptr, <span class="keyword">const</span> <span class="keyword">void</span> *data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入节点 头插入</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">linked_list_node_prepend</span><span class="params">(<span class="keyword">int</span> *ptr, <span class="keyword">const</span> <span class="keyword">void</span> *data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">linked_list_travel</span><span class="params">(<span class="keyword">int</span> *ptr, <span class="keyword">node_print_fun_t</span> *proc)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linked_list_node_delete</span><span class="params">(<span class="keyword">int</span> *ptr, <span class="keyword">node_compare_fun_t</span> *compare, <span class="keyword">const</span> <span class="keyword">void</span> *key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">linked_list_node_find</span><span class="params">(<span class="keyword">int</span> *ptr, <span class="keyword">node_compare_fun_t</span> *compare, <span class="keyword">const</span> <span class="keyword">void</span> *key)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>定义链表的数据结构<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义双向链表节点</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">void</span> *data;</span><br><span class="line">    node *prev,*next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义双向链表结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">linked_list</span>&#123;</span></span><br><span class="line">    node head;</span><br><span class="line">    <span class="comment">//元素大小</span></span><br><span class="line">    <span class="keyword">int</span> elm_size;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>看，是不是和我们之前实现的单向链表差不多呢。<br>然后我们实现头文件中的方法。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">LINKED_LIST_T *<span class="title">linked_list_new</span><span class="params">(<span class="keyword">int</span> elm_size)</span> </span>&#123;</span><br><span class="line">    linked_list *new_list = (linked_list *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(linked_list));</span><br><span class="line">    <span class="keyword">if</span> (new_list == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    new_list-&gt;head.data = <span class="literal">NULL</span>;</span><br><span class="line">    new_list-&gt;head.next = &amp;new_list-&gt;head;</span><br><span class="line">    new_list-&gt;head.prev = &amp;new_list-&gt;head;</span><br><span class="line">    new_list-&gt;elm_size = elm_size;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">void</span> *)new_list;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">linked_list_delete</span><span class="params">(LINKED_LIST_T *ptr)</span> </span>&#123;</span><br><span class="line">    linked_list *me = (linked_list*)ptr;</span><br><span class="line">    node *curr, *save;</span><br><span class="line">    <span class="keyword">for</span> (curr = me-&gt;head.next; curr != &amp;me-&gt;head; curr = save) &#123;</span><br><span class="line">        save = curr-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(curr-&gt;data);</span><br><span class="line">        <span class="built_in">free</span>(curr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(me);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入节点 在元素末尾追加元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">linked_list_node_append</span><span class="params">(LINKED_LIST_T *ptr, <span class="keyword">const</span> <span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">    linked_list *new_list = (linked_list*)ptr;</span><br><span class="line">    node *new_node;</span><br><span class="line">    new_node = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    <span class="keyword">if</span> (new_node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    new_node-&gt;data = <span class="built_in">malloc</span>(new_list-&gt;elm_size);</span><br><span class="line">    <span class="keyword">if</span> (new_node-&gt;data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(new_node);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//复制内存</span></span><br><span class="line">    <span class="built_in">memcpy</span>(new_node-&gt;data, data, new_list-&gt;elm_size);</span><br><span class="line">    new_list-&gt;head.prev-&gt;next = new_node;</span><br><span class="line">    new_node-&gt;prev = new_list-&gt;head.prev;</span><br><span class="line">    new_list-&gt;head.prev = new_node;</span><br><span class="line">    new_node-&gt;next = &amp;new_list-&gt;head;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入节点 在元素头追加元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">linked_list_node_prepend</span><span class="params">(LINKED_LIST_T *ptr, <span class="keyword">const</span> <span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line">    linked_list *new_list = (linked_list*)ptr;</span><br><span class="line">    node *new_node;</span><br><span class="line">    new_node = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    <span class="keyword">if</span> (new_node == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    new_node-&gt;data = <span class="built_in">malloc</span>(new_list-&gt;elm_size);</span><br><span class="line">    <span class="keyword">if</span> (new_node-&gt;data == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">free</span>(new_node);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//复制内存</span></span><br><span class="line">    <span class="built_in">memcpy</span>(new_node-&gt;data, data, new_list-&gt;elm_size);</span><br><span class="line">    new_list-&gt;head.next-&gt;prev = new_node;</span><br><span class="line">    new_node-&gt;next = new_list-&gt;head.next;</span><br><span class="line">    new_list-&gt;head.next = new_node;</span><br><span class="line">    new_node-&gt;prev = &amp;new_list-&gt;head;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历节点</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">linked_list_travel</span><span class="params">(LINKED_LIST_T *ptr, <span class="keyword">node_print_fun_t</span> *proc)</span> </span>&#123;</span><br><span class="line">    linked_list *me = (linked_list*)ptr;</span><br><span class="line">    node *curr;</span><br><span class="line">    <span class="keyword">for</span> (curr = me-&gt;head.next; curr != &amp;me-&gt;head; curr = curr-&gt;next)&#123;</span><br><span class="line">        proc(curr-&gt;data); <span class="comment">// proc(something you like)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linked_list_node_delete</span><span class="params">(LINKED_LIST_T *ptr,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">node_compare_fun_t</span> *comp,</span></span></span><br><span class="line"><span class="function"><span class="params">                       <span class="keyword">const</span> <span class="keyword">void</span> *key)</span> </span>&#123;</span><br><span class="line">    linked_list *me = (linked_list*)ptr;</span><br><span class="line">    node *curr;</span><br><span class="line">    <span class="keyword">for</span> (curr = me-&gt;head.next;</span><br><span class="line">            curr != &amp;me-&gt;head; curr = curr-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (*comp)(curr-&gt;data, key) == <span class="number">0</span> ) &#123;</span><br><span class="line">            node *_next, *_prev;</span><br><span class="line">            _prev = curr-&gt;prev; _next = curr-&gt;next;</span><br><span class="line">            _prev-&gt;next = _next; _next-&gt;prev = _prev;</span><br><span class="line">            <span class="built_in">free</span>(curr-&gt;data);</span><br><span class="line">            <span class="built_in">free</span>(curr);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">linked_list_node_find</span><span class="params">(LINKED_LIST_T *ptr,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">node_compare_fun_t</span> *comp,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="keyword">const</span> <span class="keyword">void</span> *key)</span> </span>&#123;</span><br><span class="line">    linked_list *me = (linked_list*)ptr;</span><br><span class="line">    node *curr;</span><br><span class="line">    <span class="keyword">for</span> (curr = me-&gt;head.next;</span><br><span class="line">            curr != &amp;me-&gt;head; curr = curr-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (*comp)(curr-&gt;data, key) == <span class="number">0</span> )</span><br><span class="line">            <span class="keyword">return</span> curr-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *data1, <span class="keyword">const</span> <span class="keyword">void</span> *data2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (*((<span class="keyword">int</span>*)data1) == *((<span class="keyword">int</span>*)data2))&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">proc</span><span class="params">(<span class="keyword">void</span> *data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *((<span class="keyword">int</span>*)data) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="链表的存储结构"><a href="#链表的存储结构" class="headerlink" title="链表的存储结构"></a>链表的存储结构</h3><p>链表中的节点不需要以特定的方式存储，但是集中存储也是可以的，主要分下面这几种具体的存储方法：</p><h4 id="共用存储空间"><a href="#共用存储空间" class="headerlink" title="共用存储空间"></a>共用存储空间</h4><p>链表的节点和其它的数据共用存储空间，优点是可以存储无限多的内容（不过要处理器支持这个大小，并且存储空间足够的情况下），不需要提前分配内存；缺点是由于内容分散，有时候可能不方便调试。</p><h4 id="独立存储空间"><a href="#独立存储空间" class="headerlink" title="独立存储空间"></a>独立存储空间</h4><p>一个链表或者多个链表使用独立的存储空间，一般用数组或者类似结构实现，优点是可以自动获得一个附加数据：唯一的编号，并且方便调试；缺点是不能动态的分配内存。<br>当然，另外的在上面加一层块状链表用来分配内存也是可以的，这样就解决了这个问题。这种方法有时候被叫做数组模拟链表，但是事实上只是用表示在数组中的位置的下标索引代替了指向内存地址的指针，这种下标索引其实也是逻辑上的指针，整个结构还是链表，并不算是被模拟的（但是可以说成是用数组实现的链表）。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h4 id="单向链表-1"><a href="#单向链表-1" class="headerlink" title="单向链表"></a>单向链表</h4><p>链表中最简单的一种是单向链表，它包含两个域，一个信息域和一个指针域。这个链接指向列表中的下一个节点，而最后一个节点则指向一个空值。</p><h4 id="双向链表-1"><a href="#双向链表-1" class="headerlink" title="双向链表"></a>双向链表</h4><p>双向链表中不仅有指向后一个节点的指针，还有指向前一个节点的指针。</p><h4 id="循环链表-1"><a href="#循环链表-1" class="headerlink" title="循环链表"></a>循环链表</h4><p>将一个单向链表或双向链表首尾相连，就成了循环链表。<br>这种方式在单向和双向链表中皆可实现，区别仅在于单向循环链表只能从一个方向循环，双向循环链表可以超两个方向循环。</p><h4 id="链表特点"><a href="#链表特点" class="headerlink" title="链表特点"></a>链表特点</h4><p>线性、无序、查询慢、插入快</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是链表&quot;&gt;&lt;a href=&quot;#什么是链表&quot; class=&quot;headerlink&quot; title=&quot;什么是链表&quot;&gt;&lt;/a&gt;什么是链表&lt;/h3&gt;&lt;p&gt;链表（Linked list）是一种常见的基础数据结构，是一种线性表，但是并不会按线性的顺序存储数据，而是在每一个节
      
    
    </summary>
    
      <category term="数据结构" scheme="http://blog.onlinetool.com.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://blog.onlinetool.com.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="链表" scheme="http://blog.onlinetool.com.cn/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>数据结构之数组</title>
    <link href="http://blog.onlinetool.com.cn/dataStructure/dataStructure-array/"/>
    <id>http://blog.onlinetool.com.cn/dataStructure/dataStructure-array/</id>
    <published>2018-07-25T16:00:00.000Z</published>
    <updated>2020-09-25T03:37:14.685Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h3><p>数组（array），是有序的元素序列。若将有限个类型相同的变量的集合命名，那么这个名称为数组名。<br>组成数组的各个变量称为数组的分量，也称为数组的元素（element），有时也称为下标变量。<br>用于区分数组的各个元素的数字编号称为下标。数组是在程序设计中，为了处理方便， 把具有相同类型的若干元素按无序的形式组织起来的一种形式。<br>数组，是由相同类型的元素的集合所组成的数据结构，分配一块连续的内存来存储。利用元素的索引（index）可以计算出该元素对应的存储地址。<br>数组是最早期和最重要的数据结构之一，很多程序都会用到数组。<br>它们也用于实现许多其他数据结构，譬如列表（list）和字符串（string）。</p><p><a href="https://github.com/ch0ice/blog-example/tree/master/data-structure/array/" rel="external nofollow noopener noreferrer" target="_blank"><font color="#0099ff">点击这里查看博客对应的完整代码</font></a></p><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><p>一维数组是计算机程序中最基本最简单的数据结构类型，由数字组成的以单纯的排序结构排列的结构单一的数组。</p><h4 id="一维数组常规操作"><a href="#一维数组常规操作" class="headerlink" title="一维数组常规操作"></a>一维数组常规操作</h4><h5 id="静态一维数组"><a href="#静态一维数组" class="headerlink" title="静态一维数组"></a>静态一维数组</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"静态创建一维数组"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查询"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"修改"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查询"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h5 id="动态一维数组"><a href="#动态一维数组" class="headerlink" title="动态一维数组"></a>动态一维数组</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"动态创建一维数组"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> length = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> *a1 = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(length * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"初始化"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">a1[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a1[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">a1[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查询"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">"值="</span> &lt;&lt; a1[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">"值="</span> &lt;&lt; a1[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">"值="</span> &lt;&lt; a1[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"修改"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">*(a1+<span class="number">1</span>) = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查询"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="string">"值="</span> &lt;&lt; a1[<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="string">"值="</span> &lt;&lt; a1[<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; <span class="number">2</span> &lt;&lt; <span class="string">"值="</span> &lt;&lt; a1[<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>二维数组本质上是以数组作为数组元素的数组，即“数组的数组”。</p><h4 id="二维数组的常规操作"><a href="#二维数组的常规操作" class="headerlink" title="二维数组的常规操作"></a>二维数组的常规操作</h4><h5 id="静态二维数组"><a href="#静态二维数组" class="headerlink" title="静态二维数组"></a>静态二维数组</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"静态创建二维数组"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">2</span>][<span class="number">2</span>] =</span><br><span class="line">&#123;</span><br><span class="line">    &#123;<span class="number">11</span>,<span class="number">22</span>&#125;,</span><br><span class="line">    &#123;<span class="number">33</span>,<span class="number">44</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查询"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"修改"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">b[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">55</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查询"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h5 id="动态二维数组"><a href="#动态二维数组" class="headerlink" title="动态二维数组"></a>动态二维数组</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"动态创建二维数组"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//一维长度/行长度</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//二维长度/列长度</span></span><br><span class="line"><span class="keyword">int</span> y = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//数组总长度</span></span><br><span class="line"><span class="keyword">int</span> length1 = x * y;</span><br><span class="line"><span class="keyword">int</span> *b1 = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(length1 * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"初始化"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">b1[<span class="number">0</span> * y + <span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">b1[<span class="number">0</span> * y + <span class="number">1</span>] = <span class="number">22</span>;;</span><br><span class="line">b1[<span class="number">1</span> * y + <span class="number">0</span>] = <span class="number">33</span>;;</span><br><span class="line">b1[<span class="number">1</span> * y + <span class="number">1</span>] = <span class="number">44</span>;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查询"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; <span class="string">"值="</span> &lt;&lt; b1[<span class="number">0</span> * y + <span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; <span class="string">"值="</span> &lt;&lt; b1[<span class="number">0</span> * y + <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; <span class="string">"值="</span> &lt;&lt; b1[<span class="number">1</span> * y + <span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; <span class="string">"值="</span> &lt;&lt; b1[<span class="number">1</span> * y + <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"修改"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">b1[<span class="number">0</span>*<span class="number">2</span>+<span class="number">0</span>] = <span class="number">55</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查询"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; <span class="string">"值="</span> &lt;&lt; b1[<span class="number">0</span> * y + <span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; <span class="string">"值="</span> &lt;&lt; b1[<span class="number">0</span> * y + <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; <span class="string">"值="</span> &lt;&lt; b1[<span class="number">1</span> * y + <span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; <span class="string">"值="</span> &lt;&lt; b1[<span class="number">1</span> * y + <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>三维及其以上的数组称为多维数组，三维数组具有高、宽、深的概念，或者说行、列、层的概念，由于其可以用来描述三维空间中的位置或状态而被广泛使用。</p><h4 id="多维数组的常规操作"><a href="#多维数组的常规操作" class="headerlink" title="多维数组的常规操作"></a>多维数组的常规操作</h4><h5 id="静态多维数组"><a href="#静态多维数组" class="headerlink" title="静态多维数组"></a>静态多维数组</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"静态创建多维数组"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>] =</span><br><span class="line">&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">111</span>,<span class="number">222</span>&#125;,</span><br><span class="line">        &#123;<span class="number">333</span>,<span class="number">444</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="number">555</span>,<span class="number">666</span>&#125;,</span><br><span class="line">        &#123;<span class="number">777</span>,<span class="number">888</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查询"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"修改"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">c[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">666</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查询"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">0</span>][<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">0</span>][<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">0</span>][<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">1</span>][<span class="number">0</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[<span class="number">1</span>][<span class="number">1</span>][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h5 id="动态多维数组"><a href="#动态多维数组" class="headerlink" title="动态多维数组"></a>动态多维数组</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"动态创建多维数组"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//一维长度/高度</span></span><br><span class="line"><span class="keyword">int</span> h = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//二维长度/宽度</span></span><br><span class="line"><span class="keyword">int</span> w = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//三维长度/深度</span></span><br><span class="line"><span class="keyword">int</span> d = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//数组总长度</span></span><br><span class="line"><span class="keyword">int</span> length2 = h * w * d;</span><br><span class="line"><span class="keyword">int</span> *c1 = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(length2 * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"初始化"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">c1[<span class="number">0</span> * h * w + <span class="number">0</span> * d + <span class="number">0</span>] = <span class="number">111</span>;</span><br><span class="line">c1[<span class="number">0</span> * h * w + <span class="number">0</span> * d + <span class="number">1</span>] = <span class="number">222</span>;</span><br><span class="line">c1[<span class="number">0</span> * h * w + <span class="number">1</span> * d + <span class="number">0</span>] = <span class="number">333</span>;</span><br><span class="line">c1[<span class="number">0</span> * h * w + <span class="number">1</span> * d + <span class="number">1</span>] = <span class="number">444</span>;</span><br><span class="line">c1[<span class="number">1</span> * h * w + <span class="number">0</span> * d + <span class="number">0</span>] = <span class="number">555</span>;</span><br><span class="line">c1[<span class="number">1</span> * h * w + <span class="number">0</span> * d + <span class="number">1</span>] = <span class="number">666</span>;</span><br><span class="line">c1[<span class="number">1</span> * h * w + <span class="number">1</span> * d + <span class="number">0</span>] = <span class="number">777</span>;</span><br><span class="line">c1[<span class="number">1</span> * h * w + <span class="number">1</span> * d + <span class="number">1</span>] = <span class="number">888</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查询"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">0</span> * h * w + <span class="number">0</span> * d + <span class="number">0</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">0</span> * h * w + <span class="number">0</span> * d + <span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">0</span> * h * w + <span class="number">0</span> * d + <span class="number">1</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">0</span> * h * w + <span class="number">0</span> * d + <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">0</span> * h * w + <span class="number">1</span> * d + <span class="number">0</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">0</span> * h * w + <span class="number">1</span> * d + <span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">0</span> * h * w + <span class="number">1</span> * d + <span class="number">1</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">0</span> * h * w + <span class="number">1</span> * d + <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">1</span> * h * w + <span class="number">0</span> * d + <span class="number">0</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">1</span> * h * w + <span class="number">0</span> * d + <span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">1</span> * h * w + <span class="number">0</span> * d + <span class="number">1</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">1</span> * h * w + <span class="number">0</span> * d + <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">1</span> * h * w + <span class="number">1</span> * d + <span class="number">0</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">1</span> * h * w + <span class="number">1</span> * d + <span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">1</span> * h * w + <span class="number">1</span> * d + <span class="number">1</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">1</span> * h * w + <span class="number">1</span> * d + <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"修改"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">c1[<span class="number">0</span> * w * d + <span class="number">0</span> * d + <span class="number">0</span>] = <span class="number">666</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"查询"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">0</span> * h * w + <span class="number">0</span> * d + <span class="number">0</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">0</span> * h * w + <span class="number">0</span> * d + <span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">0</span> * h * w + <span class="number">0</span> * d + <span class="number">1</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">0</span> * h * w + <span class="number">0</span> * d + <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">0</span> * h * w + <span class="number">1</span> * d + <span class="number">0</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">0</span> * h * w + <span class="number">1</span> * d + <span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">0</span> * h * w + <span class="number">1</span> * d + <span class="number">1</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">0</span> * h * w + <span class="number">1</span> * d + <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">1</span> * h * w + <span class="number">0</span> * d + <span class="number">0</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">1</span> * h * w + <span class="number">0</span> * d + <span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">1</span> * h * w + <span class="number">0</span> * d + <span class="number">1</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">1</span> * h * w + <span class="number">0</span> * d + <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">1</span> * h * w + <span class="number">1</span> * d + <span class="number">0</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">1</span> * h * w + <span class="number">1</span> * d + <span class="number">0</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"下标="</span> &lt;&lt; (<span class="number">1</span> * h * w + <span class="number">1</span> * d + <span class="number">1</span>) &lt;&lt; <span class="string">"值="</span> &lt;&lt; c1[<span class="number">1</span> * h * w + <span class="number">1</span> * d + <span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h3 id="元素标识符和定址公式"><a href="#元素标识符和定址公式" class="headerlink" title="元素标识符和定址公式"></a>元素标识符和定址公式</h3><p>首先我们先明确几个概念</p><ul><li>数组名 =  数组首元素地址 = 元素基址</li><li>元素地址 = 元素基址 + 元素下标</li><li>元素基址 + 元素下标 的值 会被解析成 定址公式</li><li>元素标识符和定址公式体现出了数组的内存连续性</li></ul><p>下面所有代码全部使用”下标优先”规则，并且内存连续，实际实现 二维 多维数组和本例子可能有所不同，比如可能维度之间内存不连续等，以下例子只为表达概念。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证一维数组 定址公式 = (a1+0) + i * sizeof(DataType)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"验证一维数组 定址公式"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"打印元素基址"</span> &lt;&lt; a1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"打印元素基址"</span> &lt;&lt; a1+<span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//根据上面我们说的公式 假设 元素基址 = 0x7ffc39400340</span></span><br><span class="line"><span class="comment">//那么 0x7ffc39400340 + 1 * 4 = 0x7ffc39400344;</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"打印第二个元素的地址"</span> &lt;&lt; a1+<span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证二维数组 定址公式 = (b1+0) + (x * 2 + y) * sizeof(DataType)</span></span><br><span class="line"><span class="comment">//注意公式里的 x y 和上面打印的不一样，上面的 x y 分别代表每个维度的长度，公式里面是每个维度的下标</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"验证二维数组 定址公式"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"打印元素基址"</span> &lt;&lt; b1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"打印元素基址"</span> &lt;&lt; (b1 + <span class="number">0</span> * y + <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//根据上面我们说的公式 假设 元素基址 = 0x7ffc39400340</span></span><br><span class="line"><span class="comment">//那么 0x7ffc39400340 + (x * 2 + y) = 0x7ffc39400344;</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"打印第二个元素的地址"</span> &lt;&lt; (b1 + <span class="number">0</span> * y + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证三维数组 定址公式 = (c1+0) + (h * 2 * 2 + w * 2 + d) * sizeof(DataType)</span></span><br><span class="line"><span class="comment">//注意公式里的 h w y 和上面打印的不一样，上面的 h w y 分别代表每个维度的长度，公式里面是每个维度的下标</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"验证三维数组 定址公式"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"打印元素基址"</span> &lt;&lt; c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"打印元素基址"</span> &lt;&lt; c1+<span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//根据上面我们说的公式 假设 元素基址 = 0x7ffc39400340</span></span><br><span class="line"><span class="comment">//那么 0x7ffc39400340 + 0 * 2 * 2 + 0 * 2 + 1 = 0x7ffc39400344;</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"打印第二个元素的地址"</span> &lt;&lt; c1 + <span class="number">0</span> * <span class="number">2</span> * <span class="number">2</span> + <span class="number">0</span> * <span class="number">2</span> + <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>数组就是数量固定且类型相同的元素集合。<br>数组的的内存空间是连续的，有规律的，所以可以直接使用下表访问相应的元素。<br>数组的查询是非常快的，因为它可以直接根据下标计算出内存地址，不用像 链表 一样，每次查询都需要遍历。<br>数组的插入和删除是比较慢的，因为每次插入或删除一个元素的时候，都需要重新维护序号指针，除非操作的是最后一个元素。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是数组&quot;&gt;&lt;a href=&quot;#什么是数组&quot; class=&quot;headerlink&quot; title=&quot;什么是数组&quot;&gt;&lt;/a&gt;什么是数组&lt;/h3&gt;&lt;p&gt;数组（array），是有序的元素序列。若将有限个类型相同的变量的集合命名，那么这个名称为数组名。&lt;br&gt;组成数组的各
      
    
    </summary>
    
      <category term="数据结构" scheme="http://blog.onlinetool.com.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://blog.onlinetool.com.cn/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数组" scheme="http://blog.onlinetool.com.cn/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
</feed>
